#
# (C) COPYRIGHT 2012,2014 ARM Limited. All rights reserved.
#
# This program is free software and is provided to you under the terms of the
# GNU General Public License version 2 as published by the Free Software
# Foundation, and any use by you of this program is subject to the terms
# of such GNU licence.
#
# A copy of the licence is included with the program, and can also be obtained
# from Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA.
#
#



# Driver version string which is returned to userspace via an ioctl
MALI_RELEASE_NAME ?= "r5p0-05dev0"

# Paths required for build
KBASE_PATH = $(src)
KBASE_PLATFORM_PATH = $(KBASE_PATH)/platform_dummy
UMP_PATH = $(src)/../../../base

ifeq ($(CONFIG_MALI_ERROR_INJECTION),y)
MALI_ERROR_INJECT_ON = 1
endif

# Set up defaults if not defined by build system
MALI_CUSTOMER_RELEASE ?= 1
MALI_UNIT_TEST ?= 0
MALI_KERNEL_TEST_API ?= 0
MALI_ERROR_INJECT_ON ?= 0
MALI_MOCK_TEST ?= 0
MALI_COVERAGE ?= 0
MALI_INSTRUMENTATION_LEVEL ?= 0
SLSI_INTEGRATION ?= 1
# This workaround is for what seems to be a compiler bug we observed in
# GCC 4.7 on AOSP 4.3.  The bug caused an intermittent failure compiling
# the "_Pragma" syntax, where an error message is returned:
#
# "internal compiler error: unspellable token PRAGMA"
#
# This regression has thus far only been seen on the GCC 4.7 compiler bundled
# with AOSP 4.3.0.  So this makefile, intended for in-tree kernel builds
# which are not known to be used with AOSP, is hardcoded to disable the
# workaround, i.e. set the define to 0.
MALI_GCC_WORKAROUND_MIDCOM_4598 ?= 0

# Mali Overlay #
SOC_NAME ?= 5430

ifeq ($(CONFIG_SOC_EXYNOS5250),y)
        SOC_NAME=5250
endif
ifeq ($(CONFIG_SOC_EXYNOS5412),y)
        SOC_NAME=5412
endif
ifeq ($(CONFIG_SOC_EXYNOS5420),y)
        SOC_NAME=5420
endif
ifeq ($(CONFIG_SOC_EXYNOS5422),y)
	SOC_NAME=5422
endif
ifeq ($(CONFIG_SOC_EXYNOS5430),y)
	SOC_NAME=5430
endif
ifeq ($(CONFIG_SOC_EXYNOS5433),y)
	SOC_NAME=5433
endif
ifeq ($(CONFIG_SOC_EXYNOS7420),y)
	SOC_NAME=7420
endif
ifeq ($(CONFIG_SOC_EXYNOS7580),y)
	SOC_NAME=7580
endif

# Mali Overlay #

# Set up our defines, which will be passed to gcc
DEFINES = \
	-DMALI_CUSTOMER_RELEASE=$(MALI_CUSTOMER_RELEASE) \
	-DMALI_KERNEL_TEST_API=$(MALI_KERNEL_TEST_API) \
	-DMALI_UNIT_TEST=$(MALI_UNIT_TEST) \
	-DMALI_ERROR_INJECT_ON=$(MALI_ERROR_INJECT_ON) \
	-DMALI_MOCK_TEST=$(MALI_MOCK_TEST) \
	-DMALI_COVERAGE=$(MALI_COVERAGE) \
	-DMALI_INSTRUMENTATION_LEVEL=$(MALI_INSTRUMENTATION_LEVEL) \
	-DMALI_RELEASE_NAME=\"$(MALI_RELEASE_NAME)\" \
	-DSOC_NAME=$(SOC_NAME) \
	-DMALI_GCC_WORKAROUND_MIDCOM_4598=$(MALI_GCC_WORKAROUND_MIDCOM_4598)

ifeq ($(KBUILD_EXTMOD),)
# in-tree
DEFINES +=-DMALI_KBASE_THIRDPARTY_PATH=../../$(src)/platform/$(CONFIG_MALI_PLATFORM_THIRDPARTY_NAME)
else
# out-of-tree
DEFINES +=-DMALI_KBASE_THIRDPARTY_PATH=$(src)/platform/$(CONFIG_MALI_PLATFORM_THIRDPARTY_NAME)
endif

#MALI_SEC
DEFINES +=-DSLSI_INTEGRATION=$(SLSI_INTEGRATION)
DEFINES +=-DSLSI_FENCE_INTEGRATION
DEFINES +=-DCL_UTILIZATION_BOOST_BY_TIME_WEIGHT
DEFINES +=-DSLSI_SUBSTITUTE
ifeq ($(CONFIG_MALI_SEPERATED_UTILIZATION),y)
       DEFINES +=-DSEPERATED_UTILIZATION
endif
ifeq ($(CONFIG_MALI_SEC_HWCNT),y)
       DEFINES +=-DSEC_HWCNT
endif

# Use our defines when compiling
ccflags-y += $(DEFINES) -I$(KBASE_PATH)   -I$(KBASE_PLATFORM_PATH) -I$(UMP_PATH)
subdir-ccflags-y += $(DEFINES) -I$(KBASE_PATH)   -I$(KBASE_PLATFORM_PATH) -I$(OSK_PATH) -I$(UMP_PATH)

SRC := \
	mali_kbase_device.c \
	mali_kbase_cache_policy.c \
	mali_kbase_mem.c \
	mali_kbase_mmu.c \
	mali_kbase_jd.c \
	mali_kbase_jd_debugfs.c \
	mali_kbase_jm.c \
	mali_kbase_cpuprops.c \
	mali_kbase_gpuprops.c \
	mali_kbase_js.c \
	mali_kbase_js_affinity.c \
	mali_kbase_js_ctx_attr.c \
	mali_kbase_event.c \
	mali_kbase_context.c \
	mali_kbase_pm.c \
	mali_kbase_pm_driver.c \
	mali_kbase_pm_metrics.c \
	mali_kbase_pm_ca.c \
	mali_kbase_pm_ca_fixed.c \
	mali_kbase_pm_always_on.c \
	mali_kbase_pm_coarse_demand.c \
	mali_kbase_pm_demand.c \
	mali_kbase_pm_policy.c \
	mali_kbase_config.c \
	mali_kbase_security.c \
	mali_kbase_instr.c \
	mali_kbase_softjobs.c \
	mali_kbase_10969_workaround.c \
	mali_kbase_hw.c \
	mali_kbase_utility.c \
	mali_kbase_debug.c \
	mali_kbase_trace_timeline.c \
	mali_kbase_gpu_memory_debugfs.c \
	mali_kbase_mem_linux.c \
	mali_kbase_core_linux.c \
	mali_kbase_sync.c \
	mali_kbase_sync_user.c \
	mali_kbase_replay.c \
	mali_kbase_mem_profile_debugfs.c \
	mali_kbase_mmu_hw_direct.c \
	mali_kbase_disjoint_events.c \
	mali_kbase_gator_api.c

ifeq ($(MALI_CUSTOMER_RELEASE),0)
SRC += \
	mali_kbase_pm_ca_random.c \
	mali_kbase_pm_demand_always_powered.c \
	mali_kbase_pm_fast_start.c
endif

ifeq ($(CONFIG_MALI_SEC_HWCNT),y)
SRC += mali_kbase_instr_sec.c
endif

# Job Scheduler Policy: Completely Fair Scheduler
SRC += mali_kbase_js_policy_cfs.c

ifeq ($(CONFIG_MACH_MANTA),y)
	SRC += mali_kbase_mem_alloc_carveout.c
else
	SRC += mali_kbase_mem_alloc.c
endif

# ensure GPL version of malisw gets pulled in
ccflags-y += -I$(KBASE_PATH)

ifeq ($(CONFIG_MALI_NO_MALI),y)
	# Dummy model
	SRC += mali_kbase_model_dummy.c
	SRC += mali_kbase_model_linux.c
	# HW error simulation
	SRC += mali_kbase_model_error_generator.c
endif

ifeq ($(MALI_MOCK_TEST),1)
	# Test functionality
	SRC += tests/internal/src/mock/mali_kbase_pm_driver_mock.c
endif

# in-tree/out-of-tree logic needs to be slightly different to determine if a file is present
ifeq ($(KBUILD_EXTMOD),)
# in-tree
MALI_METRICS_PATH = $(srctree)/drivers/gpu/arm/midgard
else
# out-of-tree
MALI_METRICS_PATH = $(KBUILD_EXTMOD)
endif

# Use vsync metrics example using PL111 driver, if available
ifeq ($(wildcard $(MALI_METRICS_PATH)/mali_kbase_pm_metrics_linux.c),)
	SRC += mali_kbase_pm_metrics_dummy.c
else
	SRC += mali_kbase_pm_metrics_linux.c
endif

ifeq ($(CONFIG_MALI_PLATFORM_FAKE),y)
	SRC += mali_kbase_platform_fake.c

	ifeq ($(CONFIG_MALI_PLATFORM_VEXPRESS),y)
		SRC += platform/vexpress/mali_kbase_config_vexpress.c \
		platform/vexpress/mali_kbase_cpu_vexpress.c
		ccflags-y += -I$(src)/platform/vexpress
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_RTSM_VE),y)
		SRC += platform/rtsm_ve/mali_kbase_config_vexpress.c
		ccflags-y += -I$(src)/platform/rtsm_ve
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_JUNO),y)
		SRC += platform/juno/mali_kbase_config_vexpress.c
		ccflags-y += -I$(src)/platform/juno
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_JUNO_SOC),y)
		SRC += platform/juno_soc/mali_kbase_config_juno_soc.c
		ccflags-y += -I$(src)/platform/juno_soc
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_VEXPRESS_1XV7_A57),y)
		SRC += platform/vexpress_1xv7_a57/mali_kbase_config_vexpress.c
		ccflags-y += -I$(src)/platform/vexpress_1xv7_a57
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_VEXPRESS_VIRTEX7_40MHZ),y)
		SRC += platform/vexpress_virtex7_40mhz/mali_kbase_config_vexpress.c \
		platform/vexpress_virtex7_40mhz/mali_kbase_cpu_vexpress.c
		ccflags-y += -I$(src)/platform/vexpress_virtex7_40mhz
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_VEXPRESS_6XVIRTEX7_10MHZ),y)
		SRC += platform/vexpress_6xvirtex7_10mhz/mali_kbase_config_vexpress.c \
		platform/vexpress_6xvirtex7_10mhz/mali_kbase_cpu_vexpress.c
		ccflags-y += -I$(src)/platform/vexpress_6xvirtex7_10mhz
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_GOLDFISH),y)
		SRC += platform/goldfish/mali_kbase_config_goldfish.c
		ccflags-y += -I$(src)/platform/goldfish
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_PBX),y)
		SRC += platform/pbx/mali_kbase_config_pbx.c
		ccflags-y += -I$(src)/platform/pbx
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_PANDA),y)
		SRC += platform/panda/mali_kbase_config_panda.c
		ccflags-y += -I$(src)/platform/panda
	endif

	ifeq ($(CONFIG_MALI_PLATFORM_THIRDPARTY),y)
	ifeq ($(CONFIG_MALI_MIDGARD),m)
	# remove begin and end quotes from the Kconfig string type
	platform_name := $(shell echo $(CONFIG_MALI_PLATFORM_THIRDPARTY_NAME))
	MALI_PLATFORM_THIRDPARTY_DIR := platform/$(platform_name)
	include  $(src)/platform/$(platform_name)/Kbuild
	else ifeq ($(CONFIG_MALI_MIDGARD),y)
	obj-$(CONFIG_MALI_R5P0_T72X) += platform/
	endif
	endif
endif # CONFIG_MALI_PLATFORM_FAKE=y

ifeq ($(CONFIG_MALI_PLATFORM_THIRDPARTY),y)
ifeq ($(CONFIG_MALI_R5P0_T72X),m)
# remove begin and end quotes from the Kconfig string type
platform_name := $(shell echo $(CONFIG_MALI_PLATFORM_THIRDPARTY_NAME))
MALI_PLATFORM_THIRDPARTY_DIR := platform/$(platform_name)
include  $(src)/platform/$(platform_name)/Kbuild
else ifeq ($(CONFIG_MALI_R5P0_T72X),y)
obj-$(CONFIG_MALI_R5P0_T72X) += platform/
endif
endif

# Tell the Linux build system from which .o file to create the kernel module
obj-$(CONFIG_MALI_R5P0_T72X) += mali_kbase.o

# Tell the Linux build system to enable building of our .c files
mali_kbase-y := $(SRC:.c=.o)

ifeq ($(CONFIG_MALI_MIDGARD),m)
mali_kbase-$(CONFIG_MALI_DEVFREQ) += mali_kbase_devfreq.o
mali_kbase-$(CONFIG_MALI_POWER_ACTOR) += mali_kbase_power_actor.o
endif

ifneq ($(wildcard $(src)/internal/Kbuild),)
ifeq ($(MALI_CUSTOMER_RELEASE),0)
include  $(src)/internal/Kbuild
mali_kbase-y += $(INTERNAL:.c=.o)
endif
endif
