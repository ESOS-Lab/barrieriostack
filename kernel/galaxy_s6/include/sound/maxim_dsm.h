/*
 *
 * Copyright 2011-2012 Maxim Integrated Products
 *
 *  This program is free software; you can redistribute  it and/or modify it
 *  under  the terms of  the GNU General  Public License as published by the
 *  Free Software Foundation;  either version 2 of the  License, or (at your
 *  option) any later version.
 *
 */

#ifndef __SOUND_MAXIM_DSM_H__
#define __SOUND_MAXIM_DSM_H__

#define DSM_RX_PORT_ID	0x4000

#define AFE_PARAM_ID_ENABLE_DSM_RX    0x0F010203
#define AFE_PARAM_ID_ENABLE_DSM_TX    0x0FF10203

#define DSM_ID_FILTER_GET_AFE_PARAMS 0x00000000
#define DSM_ID_FILTER_SET_AFE_CNTRLS 0x00000001

enum {
	VERSION_3_0 = 30,
	VERSION_3_5 = 35,
};

enum {
	PARAM_OFFSET_PLATFORM,
	PARAM_OFFSET_PORT_ID,
	PARAM_OFFSET_RX_MOD_ID,
	PARAM_OFFSET_TX_MOD_ID,
	PARAM_OFFSET_FILTER_SET,
	PARAM_OFFSET_VERSION,
	PARAM_OFFSET_MAX,
};

enum {
	MODE_DSM_COPP,
	MODE_DSM_AFE,
	MODE_DSM_MAX,
};

enum maxdsm_3_0_params {
	PARAM_VOICE_COIL_TEMP,
	PARAM_VOICE_COIL_TEMP_SZ,
	PARAM_EXCURSION,
	PARAM_EXCURSION_SZ,
	PARAM_RDC,
	PARAM_RDC_SZ,
	PARAM_Q,
	PARAM_Q_SZ,
	PARAM_FRES,
	PARAM_FRES_SZ,
	PARAM_EXCUR_LIMIT,
	PARAM_EXCUR_LIMIT_SZ,
	PARAM_VOICE_COIL,
	PARAM_VOICE_COIL_SZ,
	PARAM_THERMAL_LIMIT,
	PARAM_THERMAL_LIMIT_SZ,
	PARAM_RELEASE_TIME,
	PARAM_RELEASE_TIME_SZ,
	PARAM_ONOFF,
	PARAM_ONOFF_SZ,
	PARAM_STATIC_GAIN,
	PARAM_STATIC_GAIN_SZ,
	PARAM_LFX_GAIN,
	PARAM_LFX_GAIN_SZ,
	PARAM_PILOT_GAIN,
	PARAM_PILOT_GAIN_SZ,
	PARAM_WRITE_FLAG,
	PARAM_WRITE_FLAG_SZ,
	PARAM_FEATURE_SET,
	PARAM_FEATURE_SET_SZ,
	PARAM_SMOOTH_VOLT,
	PARAM_SMOOTH_VOLT_SZ,
	PARAM_HPF_CUTOFF,
	PARAM_HPF_CUTOFF_SZ,
	PARAM_LEAD_R,
	PARAM_LEAD_R_SZ,
	PARAM_RMS_SMOO_FAC,
	PARAM_RMS_SMOO_FAC_SZ,
	PARAM_CLIP_LIMIT,
	PARAM_CLIP_LIMIT_SZ,
	PARAM_THERMAL_COEF,
	PARAM_THERMAL_COEF_SZ,
	PARAM_QSPK,
	PARAM_QSPK_SZ,
	PARAM_EXCUR_LOG_THRESH,
	PARAM_EXCUR_LOG_THRESH_SZ,
	PARAM_TEMP_LOG_THRESH,
	PARAM_TEMP_LOG_THRESH_SZ,
	PARAM_RES_FREQ,
	PARAM_RES_FREQ_SZ,
	PARAM_RES_FREQ_GUARD_BAND,
	PARAM_RES_FREQ_GUARD_BAND_SZ,
	PARAM_DSM_3_0_MAX,
};

enum maxdsm_3_5_params {
	PARAM_AMBIENT_TEMP = PARAM_DSM_3_0_MAX,
	PARAM_AMBIENT_TEMP_SZ,
	PARAM_STL_ATTACK_TIME,
	PARAM_STL_ATTACK_TIME_SZ,
	PARAM_STL_RELEASE_TIME,
	PARAM_STL_RELEASE_TIME_SZ,
	PARAM_ADMITTANCE_A1,
	PARAM_ADMITTANCE_A1_SZ,
	PARAM_ADMITTANCE_A2,
	PARAM_ADMITTANCE_A2_SZ,
	PARAM_ADMITTANCE_B0,
	PARAM_ADMITTANCE_B0_SZ,
	PARAM_ADMITTANCE_B1,
	PARAM_ADMITTANCE_B1_SZ,
	PARAM_ADMITTANCE_B2,
	PARAM_ADMITTANCE_B2_SZ,
	PARAM_TCH1,
	PARAM_TCH1_SZ,
	PARAM_RTH1,
	PARAM_RTH1_SZ,
	PARAM_TCH2,
	PARAM_TCH2_SZ,
	PARAM_RTH2,
	PARAM_RTH2_SZ,
	PARAM_STL_ATTENUATION_GAIN,
	PARAM_STL_ATTENUATION_GAIN_SZ,
	PARAM_SPT_RAMP_DOWN_FRAMES,
	PARAM_SPT_RAMP_DOWN_FRAMES_SZ,
	PARAM_SPT_THRESHOLD,
	PARAM_SPT_THRESHOLD_SZ,
	PARAM_T_HORIZON,
	PARAM_T_HORIZON_SZ,
	PARAM_LFX_ADMITTANCE_A1,
	PARAM_LFX_ADMITTANCE_A1_SZ,
	PARAM_LFX_ADMITTANCE_A2,
	PARAM_LFX_ADMITTANCE_A2_SZ,
	PARAM_LFX_ADMITTANCE_B0,
	PARAM_LFX_ADMITTANCE_B0_SZ,
	PARAM_LFX_ADMITTANCE_B1,
	PARAM_LFX_ADMITTANCE_B1_SZ,
	PARAM_LFX_ADMITTANCE_B2,
	PARAM_LFX_ADMITTANCE_B2_SZ,
	PARAM_RESERVE0,
	PARAM_RESERVE0_SZ,
	PARAM_RESERVE1,
	PARAM_RESERVE1_SZ,
	PARAM_RESERVE2,
	PARAM_RESERVE2_SZ,
	PARAM_RESERVE3,
	PARAM_RESERVE3_SZ,
	PARAM_RESERVE4,
	PARAM_RESERVE4_SZ,
	PARAM_DSM_3_5_MAX,
};

enum maxdsm_lsi_3_0_params {
	PARAM_LSI_VOICE_COIL_TEMP,
	PARAM_LSI_EXCURSION,
	PARAM_LSI_RDC,
	PARAM_LSI_Q_LO,
	PARAM_LSI_Q_HI,
	PARAM_LSI_FRES_LO,
	PARAM_LSI_FRES_HI,
	PARAM_LSI_EXCUR_LIMIT,
	PARAM_LSI_VOICE_COIL,
	PARAM_LSI_THERMAL_LIMIT,
	PARAM_LSI_RELEASE_TIME,
	PARAM_LSI_ONOFF,
	PARAM_LSI_STATIC_GAIN,
	PARAM_LSI_LFX_GAIN,
	PARAM_LSI_PILOT_GAIN,
	PARAM_LSI_FEATURE_SET,
	PARAM_LSI_SMOOTH_VOLT,
	PARAM_LSI_HPF_CUTOFF,
	PARAM_LSI_LEAD_R,
	PARAM_LSI_RMS_SMOO_FAC,
	PARAM_LSI_CLIP_LIMIT,
	PARAM_LSI_THERMAL_COEF,
	PARAM_LSI_QSPK,
	PARAM_LSI_EXCUR_LOG_THRESH,
	PARAM_LSI_TEMP_LOG_THRESH,
	PARAM_LSI_RES_FREQ,
	PARAM_LSI_RES_FREQ_GUARD_BAND,
	PARAM_LSI_DSM_3_0_MAX,
};

enum maxdsm_lsi_3_5_params {
	PARAM_LSI_AMBIENT_TEMP = PARAM_LSI_DSM_3_0_MAX,
	PARAM_LSI_ADMITTANCE_A1,
	PARAM_LSI_ADMITTANCE_A2,
	PARAM_LSI_ADMITTANCE_B0,
	PARAM_LSI_ADMITTANCE_B1,
	PARAM_LSI_ADMITTANCE_B2,
	PARAM_LSI_RTH1_HI,
	PARAM_LSI_RTH2_HI,
	PARAM_LSI_RTH1_LO,
	PARAM_LSI_RTH2_LO,
	PARAM_LSI_STL_ATENGAIN_HI,
	PARAM_LSI_STL_ATENGAIN_LO,
	PARAM_LSI_SPT_RAMP_DOWN_FRAMES,
	PARAM_LSI_SPT_THRESHOLD,
	PARAM_LSI_T_HORIZON,
	PARAM_LSI_LFX_ADMITTANCE_A1,
	PARAM_LSI_LFX_ADMITTANCE_A2,
	PARAM_LSI_LFX_ADMITTANCE_B0,
	PARAM_LSI_LFX_ADMITTANCE_B1,
	PARAM_LSI_LFX_ADMITTANCE_B2,
	PARAM_LSI_RESERVE0,
	PARAM_LSI_RESERVE1,
	PARAM_LSI_RESERVE2,
	PARAM_LSI_RESERVE3,
	PARAM_LSI_RESERVE4,
	PARAM_LSI_DSM_3_5_MAX,
};

enum {
	WRITE_PROTECT,
	LOG_AVAILABLE,
	VERSION_INFO,
	LAST_2_SEC_TEMP,
	LAST_2_SEC_EXCUR,
	RESERVED_1,
	SEQUENCE_OF_TEMP,
	SEQUENCE_OF_EXCUR,
	LAST_2_SEC_RDC,
	LAST_2_SEC_FREQ,
	RESERVED_2,
	RESERVED_3,
	AFTER_2_SEC_TEMP_TEMP,
	AFTER_2_SEC_EXCUR_TEMP,
	AFTER_2_SEC_TEMP_EXCUR,
	AFTER_2_SEC_EXCUR_EXCUR,
	AFTER_2_SEC_RDC_TEMP,
	AFTER_2_SEC_FREQ_TEMP,
	AFTER_2_SEC_RDC_EXCUR,
	AFTER_2_SEC_FREQ_EXCUR,
	MAX_LOG_BUFFER_POS,
};

struct param_lsi_info {
	int id;
	uint32_t addr;
	int size;
	int type;
};

struct param_set_data {
	uint32_t name;
	uint32_t value;
};

struct maxim_dsm {
	struct regmap *regmap;
	uint32_t *param;
	uint32_t param_size;
	uint32_t platform_type;
	uint32_t port_id;
	uint32_t rx_mod_id;
	uint32_t tx_mod_id;
	uint32_t filter_set;
	uint32_t version;
	uint32_t binfo[(PARAM_DSM_3_5_MAX - PARAM_DSM_3_0_MAX) / 2];
	uint32_t registered;
};

#define FLAG_WRITE_ALL 0xabefcdab
#define FLAG_WRITE_ONOFF_ONLY	0xcdababef
#define FLAG_WRITE_RDC_CAL_ONLY 0xca00ca00
#define FLAG_WRITE_FEATURE_ONLY 0xfea0fea0

int maxdsm_init(void);
int maxdsm_deinit(void);

uint32_t maxdsm_get_platform_type(void);
int maxdsm_set_feature_en(int on);
int maxdsm_set_rdc_temp(uint32_t rdc, uint32_t temp);
#ifdef USE_DSM_CTRL
extern void maxdsm_set_dsm_onoff_status(int on);
#endif /* USE_DSM_CTRL */
extern uint32_t maxdsm_get_dcresistance(void);

extern void maxdsm_update_info(
		uint32_t *pinfo, uint32_t *binfo);
extern int maxdsm_get_port_id(void);
extern int maxdsm_get_rx_mod_id(void);
extern int maxdsm_get_tx_mod_id(void);
extern void maxdsm_set_regmap(struct regmap *regmap);

#define USE_DSM_LOG
/* #define USE_DSM_CTRL */

#ifdef USE_DSM_LOG
#define LOG_BUFFER_ARRAY_SIZE 10

/* BUFSIZE must be 4 bytes allignment*/
#define BEFORE_BUFSIZE (4+(LOG_BUFFER_ARRAY_SIZE*2))
#define AFTER_BUFSIZE (LOG_BUFFER_ARRAY_SIZE*4)

extern int maxdsm_get_dump_status(void);
extern void maxdsm_update_param(void);
extern void maxdsm_log_update(const void *byte_log_array,
		const void *int_log_array,
		const void *after_prob_byte_log_array,
		const void *after_prob_int_log_array);
extern ssize_t maxdsm_log_prepare(char *buf);
#endif /* USE_DSM_LOG */
#endif /* __SOUND_MAXIM_DSM_H__ */
