// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Datatypes {

void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto() {
  delete Scalar::default_instance_;
  delete Scalar_String::default_instance_;
  delete Scalar_Octets::default_instance_;
  delete Object::default_instance_;
  delete Object_ObjectField::default_instance_;
  delete Array::default_instance_;
  delete Any::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mysqlx_5fdatatypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Scalar::default_instance_ = new Scalar();
  Scalar_String::default_instance_ = new Scalar_String();
  Scalar_Octets::default_instance_ = new Scalar_Octets();
  Object::default_instance_ = new Object();
  Object_ObjectField::default_instance_ = new Object_ObjectField();
  Array::default_instance_ = new Array();
  Any::default_instance_ = new Any();
  Scalar::default_instance_->InitAsDefaultInstance();
  Scalar_String::default_instance_->InitAsDefaultInstance();
  Scalar_Octets::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Object_ObjectField::default_instance_->InitAsDefaultInstance();
  Array::default_instance_->InitAsDefaultInstance();
  Any::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_once_);
void protobuf_AddDesc_mysqlx_5fdatatypes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_once_,
                 &protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fdatatypes_2eproto {
  StaticDescriptorInitializer_mysqlx_5fdatatypes_2eproto() {
    protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fdatatypes_2eproto_;
#endif

// ===================================================================

bool Scalar_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Scalar_Type Scalar::V_SINT;
const Scalar_Type Scalar::V_UINT;
const Scalar_Type Scalar::V_NULL;
const Scalar_Type Scalar::V_OCTETS;
const Scalar_Type Scalar::V_DOUBLE;
const Scalar_Type Scalar::V_FLOAT;
const Scalar_Type Scalar::V_BOOL;
const Scalar_Type Scalar::V_STRING;
const Scalar_Type Scalar::Type_MIN;
const Scalar_Type Scalar::Type_MAX;
const int Scalar::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Scalar_String::kValueFieldNumber;
const int Scalar_String::kCollationFieldNumber;
#endif  // !_MSC_VER

Scalar_String::Scalar_String()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.String)
}

void Scalar_String::InitAsDefaultInstance() {
}

Scalar_String::Scalar_String(const Scalar_String& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.String)
}

void Scalar_String::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collation_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar_String::~Scalar_String() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.String)
  SharedDtor();
}

void Scalar_String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Scalar_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Scalar_String& Scalar_String::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Scalar_String* Scalar_String::default_instance_ = NULL;

Scalar_String* Scalar_String::New() const {
  return new Scalar_String;
}

void Scalar_String::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    collation_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Scalar_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collation;
        break;
      }

      // optional uint64 collation = 2;
      case 2: {
        if (tag == 16) {
         parse_collation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
          set_has_collation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.String)
  return false;
#undef DO_
}

void Scalar_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.String)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint64 collation = 2;
  if (has_collation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.String)
}

int Scalar_String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 collation = 2;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar_String::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar_String*>(&from));
}

void Scalar_String::MergeFrom(const Scalar_String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_collation()) {
      set_collation(from.collation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scalar_String::Swap(Scalar_String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(collation_, other->collation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Scalar_String::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.String";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Scalar_Octets::kValueFieldNumber;
const int Scalar_Octets::kContentTypeFieldNumber;
#endif  // !_MSC_VER

Scalar_Octets::Scalar_Octets()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.Octets)
}

void Scalar_Octets::InitAsDefaultInstance() {
}

Scalar_Octets::Scalar_Octets(const Scalar_Octets& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.Octets)
}

void Scalar_Octets::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar_Octets::~Scalar_Octets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.Octets)
  SharedDtor();
}

void Scalar_Octets::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Scalar_Octets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Scalar_Octets& Scalar_Octets::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Scalar_Octets* Scalar_Octets::default_instance_ = NULL;

Scalar_Octets* Scalar_Octets::New() const {
  return new Scalar_Octets;
}

void Scalar_Octets::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    content_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Scalar_Octets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.Octets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_content_type;
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (tag == 16) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.Octets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.Octets)
  return false;
#undef DO_
}

void Scalar_Octets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.Octets)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.Octets)
}

int Scalar_Octets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint32 content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar_Octets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar_Octets*>(&from));
}

void Scalar_Octets::MergeFrom(const Scalar_Octets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Scalar_Octets::CopyFrom(const Scalar_Octets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_Octets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scalar_Octets::Swap(Scalar_Octets* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(content_type_, other->content_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Scalar_Octets::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.Octets";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Scalar::kTypeFieldNumber;
const int Scalar::kVSignedIntFieldNumber;
const int Scalar::kVUnsignedIntFieldNumber;
const int Scalar::kVOctetsFieldNumber;
const int Scalar::kVDoubleFieldNumber;
const int Scalar::kVFloatFieldNumber;
const int Scalar::kVBoolFieldNumber;
const int Scalar::kVStringFieldNumber;
#endif  // !_MSC_VER

Scalar::Scalar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar)
}

void Scalar::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  v_octets_ = const_cast< ::Mysqlx::Datatypes::Scalar_Octets*>(
      ::Mysqlx::Datatypes::Scalar_Octets::internal_default_instance());
#else
  v_octets_ = const_cast< ::Mysqlx::Datatypes::Scalar_Octets*>(&::Mysqlx::Datatypes::Scalar_Octets::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(
      ::Mysqlx::Datatypes::Scalar_String::internal_default_instance());
#else
  v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(&::Mysqlx::Datatypes::Scalar_String::default_instance());
#endif
}

Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar)
}

void Scalar::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  v_signed_int_ = GOOGLE_LONGLONG(0);
  v_unsigned_int_ = GOOGLE_ULONGLONG(0);
  v_octets_ = NULL;
  v_double_ = 0;
  v_float_ = 0;
  v_bool_ = false;
  v_string_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete v_octets_;
    delete v_string_;
  }
}

void Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Scalar& Scalar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Scalar* Scalar::default_instance_ = NULL;

Scalar* Scalar::New() const {
  return new Scalar;
}

void Scalar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Scalar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(v_signed_int_, v_unsigned_int_);
    type_ = 1;
    if (has_v_octets()) {
      if (v_octets_ != NULL) v_octets_->::Mysqlx::Datatypes::Scalar_Octets::Clear();
    }
    v_double_ = 0;
    v_float_ = 0;
    v_bool_ = false;
    if (has_v_string()) {
      if (v_string_ != NULL) v_string_->::Mysqlx::Datatypes::Scalar_String::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Scalar.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Scalar_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Scalar_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v_signed_int;
        break;
      }

      // optional sint64 v_signed_int = 2;
      case 2: {
        if (tag == 16) {
         parse_v_signed_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_signed_int_)));
          set_has_v_signed_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_v_unsigned_int;
        break;
      }

      // optional uint64 v_unsigned_int = 3;
      case 3: {
        if (tag == 24) {
         parse_v_unsigned_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_unsigned_int_)));
          set_has_v_unsigned_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_v_octets;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
      case 5: {
        if (tag == 42) {
         parse_v_octets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_octets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_v_double;
        break;
      }

      // optional double v_double = 6;
      case 6: {
        if (tag == 49) {
         parse_v_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
          set_has_v_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_v_float;
        break;
      }

      // optional float v_float = 7;
      case 7: {
        if (tag == 61) {
         parse_v_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_float_)));
          set_has_v_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_v_bool;
        break;
      }

      // optional bool v_bool = 8;
      case 8: {
        if (tag == 64) {
         parse_v_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
          set_has_v_bool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_v_string;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
      case 9: {
        if (tag == 74) {
         parse_v_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar)
  return false;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar)
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint64 v_signed_int = 2;
  if (has_v_signed_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->v_signed_int(), output);
  }

  // optional uint64 v_unsigned_int = 3;
  if (has_v_unsigned_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->v_unsigned_int(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  if (has_v_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->v_octets(), output);
  }

  // optional double v_double = 6;
  if (has_v_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }

  // optional float v_float = 7;
  if (has_v_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_float(), output);
  }

  // optional bool v_bool = 8;
  if (has_v_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->v_bool(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->v_string(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar)
}

int Scalar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Datatypes.Scalar.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sint64 v_signed_int = 2;
    if (has_v_signed_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (has_v_unsigned_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_unsigned_int());
    }

    // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
    if (has_v_octets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_octets());
    }

    // optional double v_double = 6;
    if (has_v_double()) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (has_v_float()) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (has_v_bool()) {
      total_size += 1 + 1;
    }

    // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_string());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar*>(&from));
}

void Scalar::MergeFrom(const Scalar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_v_signed_int()) {
      set_v_signed_int(from.v_signed_int());
    }
    if (from.has_v_unsigned_int()) {
      set_v_unsigned_int(from.v_unsigned_int());
    }
    if (from.has_v_octets()) {
      mutable_v_octets()->::Mysqlx::Datatypes::Scalar_Octets::MergeFrom(from.v_octets());
    }
    if (from.has_v_double()) {
      set_v_double(from.v_double());
    }
    if (from.has_v_float()) {
      set_v_float(from.v_float());
    }
    if (from.has_v_bool()) {
      set_v_bool(from.v_bool());
    }
    if (from.has_v_string()) {
      mutable_v_string()->::Mysqlx::Datatypes::Scalar_String::MergeFrom(from.v_string());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Scalar::CopyFrom(const Scalar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_v_octets()) {
    if (!this->v_octets().IsInitialized()) return false;
  }
  if (has_v_string()) {
    if (!this->v_string().IsInitialized()) return false;
  }
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(v_signed_int_, other->v_signed_int_);
    std::swap(v_unsigned_int_, other->v_unsigned_int_);
    std::swap(v_octets_, other->v_octets_);
    std::swap(v_double_, other->v_double_);
    std::swap(v_float_, other->v_float_);
    std::swap(v_bool_, other->v_bool_);
    std::swap(v_string_, other->v_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Scalar::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar";
}


// ===================================================================

#ifndef _MSC_VER
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !_MSC_VER

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object.ObjectField)
}

void Object_ObjectField::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
#else
  value_ = const_cast< ::Mysqlx::Datatypes::Any*>(&::Mysqlx::Datatypes::Any::default_instance());
#endif
}

Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete value_;
  }
}

void Object_ObjectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Object_ObjectField& Object_ObjectField::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Object_ObjectField* Object_ObjectField::default_instance_ = NULL;

Object_ObjectField* Object_ObjectField::New() const {
  return new Object_ObjectField;
}

void Object_ObjectField::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object.ObjectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object.ObjectField)
}

int Object_ObjectField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .Mysqlx.Datatypes.Any value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_ObjectField::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Object_ObjectField*>(&from));
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Object_ObjectField::GetTypeName() const {
  return "Mysqlx.Datatypes.Object.ObjectField";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Object::kFldFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object)
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Object& Object::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  fld_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
      case 1: {
        if (tag == 10) {
         parse_fld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fld;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object)
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (int i = 0; i < this->fld_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fld(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object)
}

int Object::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  total_size += 1 * this->fld_size();
  for (int i = 0; i < this->fld_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fld(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Object*>(&from));
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  fld_.MergeFrom(from.fld_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    fld_.Swap(&other->fld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Object::GetTypeName() const {
  return "Mysqlx.Datatypes.Object";
}


// ===================================================================

#ifndef _MSC_VER
const int Array::kValueFieldNumber;
#endif  // !_MSC_VER

Array::Array()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Array)
}

void Array::InitAsDefaultInstance() {
}

Array::Array(const Array& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Array)
}

void Array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Array)
  SharedDtor();
}

void Array::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Array& Array::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Array* Array::default_instance_ = NULL;

Array* Array::New() const {
  return new Array;
}

void Array::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Any value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Array)
  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->value(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Array)
}

int Array::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Datatypes.Any value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Array*>(&from));
}

void Array::MergeFrom(const Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Array::CopyFrom(const Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Array::GetTypeName() const {
  return "Mysqlx.Datatypes.Array";
}


// ===================================================================

bool Any_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Any_Type Any::SCALAR;
const Any_Type Any::OBJECT;
const Any_Type Any::ARRAY;
const Any_Type Any::Type_MIN;
const Any_Type Any::Type_MAX;
const int Any::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Any::kTypeFieldNumber;
const int Any::kScalarFieldNumber;
const int Any::kObjFieldNumber;
const int Any::kArrayFieldNumber;
#endif  // !_MSC_VER

Any::Any()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Any)
}

void Any::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
#else
  scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(&::Mysqlx::Datatypes::Scalar::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(
      ::Mysqlx::Datatypes::Object::internal_default_instance());
#else
  obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(&::Mysqlx::Datatypes::Object::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  array_ = const_cast< ::Mysqlx::Datatypes::Array*>(
      ::Mysqlx::Datatypes::Array::internal_default_instance());
#else
  array_ = const_cast< ::Mysqlx::Datatypes::Array*>(&::Mysqlx::Datatypes::Array::default_instance());
#endif
}

Any::Any(const Any& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Any)
}

void Any::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  scalar_ = NULL;
  obj_ = NULL;
  array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scalar_;
    delete obj_;
    delete array_;
  }
}

void Any::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Any& Any::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
#endif
  return *default_instance_;
}

Any* Any::default_instance_ = NULL;

Any* Any::New() const {
  return new Any;
}

void Any::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_scalar()) {
      if (scalar_ != NULL) scalar_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    if (has_obj()) {
      if (obj_ != NULL) obj_->::Mysqlx::Datatypes::Object::Clear();
    }
    if (has_array()) {
      if (array_ != NULL) array_->::Mysqlx::Datatypes::Array::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Any)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Any.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Any_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Any_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scalar;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar scalar = 2;
      case 2: {
        if (tag == 18) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obj;
        break;
      }

      // optional .Mysqlx.Datatypes.Object obj = 3;
      case 3: {
        if (tag == 26) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_array;
        break;
      }

      // optional .Mysqlx.Datatypes.Array array = 4;
      case 4: {
        if (tag == 34) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Any)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Any)
  return false;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Any)
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->scalar(), output);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->obj(), output);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->array(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Any)
}

int Any::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Datatypes.Any.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Mysqlx.Datatypes.Scalar scalar = 2;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }

    // optional .Mysqlx.Datatypes.Object obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

    // optional .Mysqlx.Datatypes.Array array = 4;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Any*>(&from));
}

void Any::MergeFrom(const Any& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      mutable_scalar()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.scalar());
    }
    if (from.has_obj()) {
      mutable_obj()->::Mysqlx::Datatypes::Object::MergeFrom(from.obj());
    }
    if (from.has_array()) {
      mutable_array()->::Mysqlx::Datatypes::Array::MergeFrom(from.array());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Any::CopyFrom(const Any& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_obj()) {
    if (!this->obj().IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array().IsInitialized()) return false;
  }
  return true;
}

void Any::Swap(Any* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(obj_, other->obj_);
    std::swap(array_, other->array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Any::GetTypeName() const {
  return "Mysqlx.Datatypes.Any";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Datatypes
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
