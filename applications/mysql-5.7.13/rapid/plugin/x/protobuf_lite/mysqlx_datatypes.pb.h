// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#ifndef PROTOBUF_mysqlx_5fdatatypes_2eproto__INCLUDED
#define PROTOBUF_mysqlx_5fdatatypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Datatypes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

class Scalar;
class Scalar_String;
class Scalar_Octets;
class Object;
class Object_ObjectField;
class Array;
class Any;

enum Scalar_Type {
  Scalar_Type_V_SINT = 1,
  Scalar_Type_V_UINT = 2,
  Scalar_Type_V_NULL = 3,
  Scalar_Type_V_OCTETS = 4,
  Scalar_Type_V_DOUBLE = 5,
  Scalar_Type_V_FLOAT = 6,
  Scalar_Type_V_BOOL = 7,
  Scalar_Type_V_STRING = 8
};
bool Scalar_Type_IsValid(int value);
const Scalar_Type Scalar_Type_Type_MIN = Scalar_Type_V_SINT;
const Scalar_Type Scalar_Type_Type_MAX = Scalar_Type_V_STRING;
const int Scalar_Type_Type_ARRAYSIZE = Scalar_Type_Type_MAX + 1;

enum Any_Type {
  Any_Type_SCALAR = 1,
  Any_Type_OBJECT = 2,
  Any_Type_ARRAY = 3
};
bool Any_Type_IsValid(int value);
const Any_Type Any_Type_Type_MIN = Any_Type_SCALAR;
const Any_Type Any_Type_Type_MAX = Any_Type_ARRAY;
const int Any_Type_Type_ARRAYSIZE = Any_Type_Type_MAX + 1;

// ===================================================================

class Scalar_String : public ::google::protobuf::MessageLite {
 public:
  Scalar_String();
  virtual ~Scalar_String();

  Scalar_String(const Scalar_String& from);

  inline Scalar_String& operator=(const Scalar_String& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Scalar_String& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Scalar_String* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Scalar_String* other);

  // implements Message ----------------------------------------------

  Scalar_String* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Scalar_String& from);
  void MergeFrom(const Scalar_String& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint64 collation = 2;
  inline bool has_collation() const;
  inline void clear_collation();
  static const int kCollationFieldNumber = 2;
  inline ::google::protobuf::uint64 collation() const;
  inline void set_collation(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Scalar.String)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_collation();
  inline void clear_has_collation();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::google::protobuf::uint64 collation_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Scalar_String* default_instance_;
};
// -------------------------------------------------------------------

class Scalar_Octets : public ::google::protobuf::MessageLite {
 public:
  Scalar_Octets();
  virtual ~Scalar_Octets();

  Scalar_Octets(const Scalar_Octets& from);

  inline Scalar_Octets& operator=(const Scalar_Octets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Scalar_Octets& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Scalar_Octets* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Scalar_Octets* other);

  // implements Message ----------------------------------------------

  Scalar_Octets* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Scalar_Octets& from);
  void MergeFrom(const Scalar_Octets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint32 content_type = 2;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 content_type() const;
  inline void set_content_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Scalar.Octets)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_content_type();
  inline void clear_has_content_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::google::protobuf::uint32 content_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Scalar_Octets* default_instance_;
};
// -------------------------------------------------------------------

class Scalar : public ::google::protobuf::MessageLite {
 public:
  Scalar();
  virtual ~Scalar();

  Scalar(const Scalar& from);

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Scalar& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Scalar* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Scalar* other);

  // implements Message ----------------------------------------------

  Scalar* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Scalar& from);
  void MergeFrom(const Scalar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Scalar_String String;
  typedef Scalar_Octets Octets;

  typedef Scalar_Type Type;
  static const Type V_SINT = Scalar_Type_V_SINT;
  static const Type V_UINT = Scalar_Type_V_UINT;
  static const Type V_NULL = Scalar_Type_V_NULL;
  static const Type V_OCTETS = Scalar_Type_V_OCTETS;
  static const Type V_DOUBLE = Scalar_Type_V_DOUBLE;
  static const Type V_FLOAT = Scalar_Type_V_FLOAT;
  static const Type V_BOOL = Scalar_Type_V_BOOL;
  static const Type V_STRING = Scalar_Type_V_STRING;
  static inline bool Type_IsValid(int value) {
    return Scalar_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Scalar_Type_Type_MIN;
  static const Type Type_MAX =
    Scalar_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Scalar_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Mysqlx::Datatypes::Scalar_Type type() const;
  inline void set_type(::Mysqlx::Datatypes::Scalar_Type value);

  // optional sint64 v_signed_int = 2;
  inline bool has_v_signed_int() const;
  inline void clear_v_signed_int();
  static const int kVSignedIntFieldNumber = 2;
  inline ::google::protobuf::int64 v_signed_int() const;
  inline void set_v_signed_int(::google::protobuf::int64 value);

  // optional uint64 v_unsigned_int = 3;
  inline bool has_v_unsigned_int() const;
  inline void clear_v_unsigned_int();
  static const int kVUnsignedIntFieldNumber = 3;
  inline ::google::protobuf::uint64 v_unsigned_int() const;
  inline void set_v_unsigned_int(::google::protobuf::uint64 value);

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  inline bool has_v_octets() const;
  inline void clear_v_octets();
  static const int kVOctetsFieldNumber = 5;
  inline const ::Mysqlx::Datatypes::Scalar_Octets& v_octets() const;
  inline ::Mysqlx::Datatypes::Scalar_Octets* mutable_v_octets();
  inline ::Mysqlx::Datatypes::Scalar_Octets* release_v_octets();
  inline void set_allocated_v_octets(::Mysqlx::Datatypes::Scalar_Octets* v_octets);

  // optional double v_double = 6;
  inline bool has_v_double() const;
  inline void clear_v_double();
  static const int kVDoubleFieldNumber = 6;
  inline double v_double() const;
  inline void set_v_double(double value);

  // optional float v_float = 7;
  inline bool has_v_float() const;
  inline void clear_v_float();
  static const int kVFloatFieldNumber = 7;
  inline float v_float() const;
  inline void set_v_float(float value);

  // optional bool v_bool = 8;
  inline bool has_v_bool() const;
  inline void clear_v_bool();
  static const int kVBoolFieldNumber = 8;
  inline bool v_bool() const;
  inline void set_v_bool(bool value);

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  inline bool has_v_string() const;
  inline void clear_v_string();
  static const int kVStringFieldNumber = 9;
  inline const ::Mysqlx::Datatypes::Scalar_String& v_string() const;
  inline ::Mysqlx::Datatypes::Scalar_String* mutable_v_string();
  inline ::Mysqlx::Datatypes::Scalar_String* release_v_string();
  inline void set_allocated_v_string(::Mysqlx::Datatypes::Scalar_String* v_string);

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Scalar)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_v_signed_int();
  inline void clear_has_v_signed_int();
  inline void set_has_v_unsigned_int();
  inline void clear_has_v_unsigned_int();
  inline void set_has_v_octets();
  inline void clear_has_v_octets();
  inline void set_has_v_double();
  inline void clear_has_v_double();
  inline void set_has_v_float();
  inline void clear_has_v_float();
  inline void set_has_v_bool();
  inline void clear_has_v_bool();
  inline void set_has_v_string();
  inline void clear_has_v_string();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 v_signed_int_;
  ::google::protobuf::uint64 v_unsigned_int_;
  int type_;
  float v_float_;
  ::Mysqlx::Datatypes::Scalar_Octets* v_octets_;
  double v_double_;
  ::Mysqlx::Datatypes::Scalar_String* v_string_;
  bool v_bool_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Scalar* default_instance_;
};
// -------------------------------------------------------------------

class Object_ObjectField : public ::google::protobuf::MessageLite {
 public:
  Object_ObjectField();
  virtual ~Object_ObjectField();

  Object_ObjectField(const Object_ObjectField& from);

  inline Object_ObjectField& operator=(const Object_ObjectField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Object_ObjectField& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Object_ObjectField* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Object_ObjectField* other);

  // implements Message ----------------------------------------------

  Object_ObjectField* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Object_ObjectField& from);
  void MergeFrom(const Object_ObjectField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required .Mysqlx.Datatypes.Any value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Mysqlx::Datatypes::Any& value() const;
  inline ::Mysqlx::Datatypes::Any* mutable_value();
  inline ::Mysqlx::Datatypes::Any* release_value();
  inline void set_allocated_value(::Mysqlx::Datatypes::Any* value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Object.ObjectField)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::Mysqlx::Datatypes::Any* value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Object_ObjectField* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::MessageLite {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Object& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Object* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  Object* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Object_ObjectField ObjectField;

  // accessors -------------------------------------------------------

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  inline int fld_size() const;
  inline void clear_fld();
  static const int kFldFieldNumber = 1;
  inline const ::Mysqlx::Datatypes::Object_ObjectField& fld(int index) const;
  inline ::Mysqlx::Datatypes::Object_ObjectField* mutable_fld(int index);
  inline ::Mysqlx::Datatypes::Object_ObjectField* add_fld();
  inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >&
      fld() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >*
      mutable_fld();

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Object)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField > fld_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class Array : public ::google::protobuf::MessageLite {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Array& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Array* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Array* other);

  // implements Message ----------------------------------------------

  Array* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Mysqlx.Datatypes.Any value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::Mysqlx::Datatypes::Any& value(int index) const;
  inline ::Mysqlx::Datatypes::Any* mutable_value(int index);
  inline ::Mysqlx::Datatypes::Any* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Array)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any > value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Array* default_instance_;
};
// -------------------------------------------------------------------

class Any : public ::google::protobuf::MessageLite {
 public:
  Any();
  virtual ~Any();

  Any(const Any& from);

  inline Any& operator=(const Any& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Any& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Any* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Any* other);

  // implements Message ----------------------------------------------

  Any* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Any& from);
  void MergeFrom(const Any& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Any_Type Type;
  static const Type SCALAR = Any_Type_SCALAR;
  static const Type OBJECT = Any_Type_OBJECT;
  static const Type ARRAY = Any_Type_ARRAY;
  static inline bool Type_IsValid(int value) {
    return Any_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Any_Type_Type_MIN;
  static const Type Type_MAX =
    Any_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Any_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .Mysqlx.Datatypes.Any.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Mysqlx::Datatypes::Any_Type type() const;
  inline void set_type(::Mysqlx::Datatypes::Any_Type value);

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  inline bool has_scalar() const;
  inline void clear_scalar();
  static const int kScalarFieldNumber = 2;
  inline const ::Mysqlx::Datatypes::Scalar& scalar() const;
  inline ::Mysqlx::Datatypes::Scalar* mutable_scalar();
  inline ::Mysqlx::Datatypes::Scalar* release_scalar();
  inline void set_allocated_scalar(::Mysqlx::Datatypes::Scalar* scalar);

  // optional .Mysqlx.Datatypes.Object obj = 3;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 3;
  inline const ::Mysqlx::Datatypes::Object& obj() const;
  inline ::Mysqlx::Datatypes::Object* mutable_obj();
  inline ::Mysqlx::Datatypes::Object* release_obj();
  inline void set_allocated_obj(::Mysqlx::Datatypes::Object* obj);

  // optional .Mysqlx.Datatypes.Array array = 4;
  inline bool has_array() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 4;
  inline const ::Mysqlx::Datatypes::Array& array() const;
  inline ::Mysqlx::Datatypes::Array* mutable_array();
  inline ::Mysqlx::Datatypes::Array* release_array();
  inline void set_allocated_array(::Mysqlx::Datatypes::Array* array);

  // @@protoc_insertion_point(class_scope:Mysqlx.Datatypes.Any)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_scalar();
  inline void clear_has_scalar();
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_array();
  inline void clear_has_array();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Mysqlx::Datatypes::Scalar* scalar_;
  ::Mysqlx::Datatypes::Object* obj_;
  ::Mysqlx::Datatypes::Array* array_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  #endif
  friend void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto();

  void InitAsDefaultInstance();
  static Any* default_instance_;
};
// ===================================================================


// ===================================================================

// Scalar_String

// required bytes value = 1;
inline bool Scalar_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scalar_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scalar_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scalar_String::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Scalar_String::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.String.value)
  return *value_;
}
inline void Scalar_String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.String.value)
}
inline void Scalar_String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Scalar.String.value)
}
inline void Scalar_String::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Scalar.String.value)
}
inline ::std::string* Scalar_String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.String.value)
  return value_;
}
inline ::std::string* Scalar_String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Scalar_String::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.String.value)
}

// optional uint64 collation = 2;
inline bool Scalar_String::has_collation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scalar_String::set_has_collation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scalar_String::clear_has_collation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scalar_String::clear_collation() {
  collation_ = GOOGLE_ULONGLONG(0);
  clear_has_collation();
}
inline ::google::protobuf::uint64 Scalar_String::collation() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.String.collation)
  return collation_;
}
inline void Scalar_String::set_collation(::google::protobuf::uint64 value) {
  set_has_collation();
  collation_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.String.collation)
}

// -------------------------------------------------------------------

// Scalar_Octets

// required bytes value = 1;
inline bool Scalar_Octets::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scalar_Octets::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scalar_Octets::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scalar_Octets::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Scalar_Octets::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.Octets.value)
  return *value_;
}
inline void Scalar_Octets::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.Octets.value)
}
inline void Scalar_Octets::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Scalar.Octets.value)
}
inline void Scalar_Octets::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Scalar.Octets.value)
}
inline ::std::string* Scalar_Octets::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.Octets.value)
  return value_;
}
inline ::std::string* Scalar_Octets::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Scalar_Octets::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.Octets.value)
}

// optional uint32 content_type = 2;
inline bool Scalar_Octets::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scalar_Octets::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scalar_Octets::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scalar_Octets::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
inline ::google::protobuf::uint32 Scalar_Octets::content_type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.Octets.content_type)
  return content_type_;
}
inline void Scalar_Octets::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.Octets.content_type)
}

// -------------------------------------------------------------------

// Scalar

// required .Mysqlx.Datatypes.Scalar.Type type = 1;
inline bool Scalar::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scalar::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scalar::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scalar::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Mysqlx::Datatypes::Scalar_Type Scalar::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.type)
  return static_cast< ::Mysqlx::Datatypes::Scalar_Type >(type_);
}
inline void Scalar::set_type(::Mysqlx::Datatypes::Scalar_Type value) {
  assert(::Mysqlx::Datatypes::Scalar_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.type)
}

// optional sint64 v_signed_int = 2;
inline bool Scalar::has_v_signed_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scalar::set_has_v_signed_int() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scalar::clear_has_v_signed_int() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scalar::clear_v_signed_int() {
  v_signed_int_ = GOOGLE_LONGLONG(0);
  clear_has_v_signed_int();
}
inline ::google::protobuf::int64 Scalar::v_signed_int() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_signed_int)
  return v_signed_int_;
}
inline void Scalar::set_v_signed_int(::google::protobuf::int64 value) {
  set_has_v_signed_int();
  v_signed_int_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_signed_int)
}

// optional uint64 v_unsigned_int = 3;
inline bool Scalar::has_v_unsigned_int() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scalar::set_has_v_unsigned_int() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scalar::clear_has_v_unsigned_int() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scalar::clear_v_unsigned_int() {
  v_unsigned_int_ = GOOGLE_ULONGLONG(0);
  clear_has_v_unsigned_int();
}
inline ::google::protobuf::uint64 Scalar::v_unsigned_int() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_unsigned_int)
  return v_unsigned_int_;
}
inline void Scalar::set_v_unsigned_int(::google::protobuf::uint64 value) {
  set_has_v_unsigned_int();
  v_unsigned_int_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_unsigned_int)
}

// optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
inline bool Scalar::has_v_octets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scalar::set_has_v_octets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scalar::clear_has_v_octets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scalar::clear_v_octets() {
  if (v_octets_ != NULL) v_octets_->::Mysqlx::Datatypes::Scalar_Octets::Clear();
  clear_has_v_octets();
}
inline const ::Mysqlx::Datatypes::Scalar_Octets& Scalar::v_octets() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_octets)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return v_octets_ != NULL ? *v_octets_ : *default_instance().v_octets_;
#else
  return v_octets_ != NULL ? *v_octets_ : *default_instance_->v_octets_;
#endif
}
inline ::Mysqlx::Datatypes::Scalar_Octets* Scalar::mutable_v_octets() {
  set_has_v_octets();
  if (v_octets_ == NULL) v_octets_ = new ::Mysqlx::Datatypes::Scalar_Octets;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.v_octets)
  return v_octets_;
}
inline ::Mysqlx::Datatypes::Scalar_Octets* Scalar::release_v_octets() {
  clear_has_v_octets();
  ::Mysqlx::Datatypes::Scalar_Octets* temp = v_octets_;
  v_octets_ = NULL;
  return temp;
}
inline void Scalar::set_allocated_v_octets(::Mysqlx::Datatypes::Scalar_Octets* v_octets) {
  delete v_octets_;
  v_octets_ = v_octets;
  if (v_octets) {
    set_has_v_octets();
  } else {
    clear_has_v_octets();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.v_octets)
}

// optional double v_double = 6;
inline bool Scalar::has_v_double() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scalar::set_has_v_double() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scalar::clear_has_v_double() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scalar::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
inline double Scalar::v_double() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_double)
  return v_double_;
}
inline void Scalar::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_double)
}

// optional float v_float = 7;
inline bool Scalar::has_v_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scalar::set_has_v_float() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scalar::clear_has_v_float() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scalar::clear_v_float() {
  v_float_ = 0;
  clear_has_v_float();
}
inline float Scalar::v_float() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_float)
  return v_float_;
}
inline void Scalar::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_float)
}

// optional bool v_bool = 8;
inline bool Scalar::has_v_bool() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scalar::set_has_v_bool() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scalar::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scalar::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
inline bool Scalar::v_bool() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_bool)
  return v_bool_;
}
inline void Scalar::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_bool)
}

// optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
inline bool Scalar::has_v_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scalar::set_has_v_string() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scalar::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scalar::clear_v_string() {
  if (v_string_ != NULL) v_string_->::Mysqlx::Datatypes::Scalar_String::Clear();
  clear_has_v_string();
}
inline const ::Mysqlx::Datatypes::Scalar_String& Scalar::v_string() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_string)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return v_string_ != NULL ? *v_string_ : *default_instance().v_string_;
#else
  return v_string_ != NULL ? *v_string_ : *default_instance_->v_string_;
#endif
}
inline ::Mysqlx::Datatypes::Scalar_String* Scalar::mutable_v_string() {
  set_has_v_string();
  if (v_string_ == NULL) v_string_ = new ::Mysqlx::Datatypes::Scalar_String;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.v_string)
  return v_string_;
}
inline ::Mysqlx::Datatypes::Scalar_String* Scalar::release_v_string() {
  clear_has_v_string();
  ::Mysqlx::Datatypes::Scalar_String* temp = v_string_;
  v_string_ = NULL;
  return temp;
}
inline void Scalar::set_allocated_v_string(::Mysqlx::Datatypes::Scalar_String* v_string) {
  delete v_string_;
  v_string_ = v_string;
  if (v_string) {
    set_has_v_string();
  } else {
    clear_has_v_string();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.v_string)
}

// -------------------------------------------------------------------

// Object_ObjectField

// required string key = 1;
inline bool Object_ObjectField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object_ObjectField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object_ObjectField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object_ObjectField::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Object_ObjectField::key() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.ObjectField.key)
  return *key_;
}
inline void Object_ObjectField::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Object.ObjectField.key)
}
inline void Object_ObjectField::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Object.ObjectField.key)
}
inline void Object_ObjectField::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Object.ObjectField.key)
}
inline ::std::string* Object_ObjectField::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.ObjectField.key)
  return key_;
}
inline ::std::string* Object_ObjectField::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Object_ObjectField::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Object.ObjectField.key)
}

// required .Mysqlx.Datatypes.Any value = 2;
inline bool Object_ObjectField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object_ObjectField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object_ObjectField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object_ObjectField::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
  clear_has_value();
}
inline const ::Mysqlx::Datatypes::Any& Object_ObjectField::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.ObjectField.value)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return value_ != NULL ? *value_ : *default_instance().value_;
#else
  return value_ != NULL ? *value_ : *default_instance_->value_;
#endif
}
inline ::Mysqlx::Datatypes::Any* Object_ObjectField::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::Mysqlx::Datatypes::Any;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.ObjectField.value)
  return value_;
}
inline ::Mysqlx::Datatypes::Any* Object_ObjectField::release_value() {
  clear_has_value();
  ::Mysqlx::Datatypes::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Object_ObjectField::set_allocated_value(::Mysqlx::Datatypes::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Object.ObjectField.value)
}

// -------------------------------------------------------------------

// Object

// repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
inline int Object::fld_size() const {
  return fld_.size();
}
inline void Object::clear_fld() {
  fld_.Clear();
}
inline const ::Mysqlx::Datatypes::Object_ObjectField& Object::fld(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.fld)
  return fld_.Get(index);
}
inline ::Mysqlx::Datatypes::Object_ObjectField* Object::mutable_fld(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.fld)
  return fld_.Mutable(index);
}
inline ::Mysqlx::Datatypes::Object_ObjectField* Object::add_fld() {
  // @@protoc_insertion_point(field_add:Mysqlx.Datatypes.Object.fld)
  return fld_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >&
Object::fld() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Datatypes.Object.fld)
  return fld_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >*
Object::mutable_fld() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Datatypes.Object.fld)
  return &fld_;
}

// -------------------------------------------------------------------

// Array

// repeated .Mysqlx.Datatypes.Any value = 1;
inline int Array::value_size() const {
  return value_.size();
}
inline void Array::clear_value() {
  value_.Clear();
}
inline const ::Mysqlx::Datatypes::Any& Array::value(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Array.value)
  return value_.Get(index);
}
inline ::Mysqlx::Datatypes::Any* Array::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Array.value)
  return value_.Mutable(index);
}
inline ::Mysqlx::Datatypes::Any* Array::add_value() {
  // @@protoc_insertion_point(field_add:Mysqlx.Datatypes.Array.value)
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
Array::value() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Datatypes.Array.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Datatypes.Array.value)
  return &value_;
}

// -------------------------------------------------------------------

// Any

// required .Mysqlx.Datatypes.Any.Type type = 1;
inline bool Any::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Any::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Any::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Any::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Mysqlx::Datatypes::Any_Type Any::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.type)
  return static_cast< ::Mysqlx::Datatypes::Any_Type >(type_);
}
inline void Any::set_type(::Mysqlx::Datatypes::Any_Type value) {
  assert(::Mysqlx::Datatypes::Any_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Any.type)
}

// optional .Mysqlx.Datatypes.Scalar scalar = 2;
inline bool Any::has_scalar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Any::set_has_scalar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Any::clear_has_scalar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Any::clear_scalar() {
  if (scalar_ != NULL) scalar_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_scalar();
}
inline const ::Mysqlx::Datatypes::Scalar& Any::scalar() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.scalar)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scalar_ != NULL ? *scalar_ : *default_instance().scalar_;
#else
  return scalar_ != NULL ? *scalar_ : *default_instance_->scalar_;
#endif
}
inline ::Mysqlx::Datatypes::Scalar* Any::mutable_scalar() {
  set_has_scalar();
  if (scalar_ == NULL) scalar_ = new ::Mysqlx::Datatypes::Scalar;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.scalar)
  return scalar_;
}
inline ::Mysqlx::Datatypes::Scalar* Any::release_scalar() {
  clear_has_scalar();
  ::Mysqlx::Datatypes::Scalar* temp = scalar_;
  scalar_ = NULL;
  return temp;
}
inline void Any::set_allocated_scalar(::Mysqlx::Datatypes::Scalar* scalar) {
  delete scalar_;
  scalar_ = scalar;
  if (scalar) {
    set_has_scalar();
  } else {
    clear_has_scalar();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.scalar)
}

// optional .Mysqlx.Datatypes.Object obj = 3;
inline bool Any::has_obj() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Any::set_has_obj() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Any::clear_has_obj() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Any::clear_obj() {
  if (obj_ != NULL) obj_->::Mysqlx::Datatypes::Object::Clear();
  clear_has_obj();
}
inline const ::Mysqlx::Datatypes::Object& Any::obj() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.obj)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return obj_ != NULL ? *obj_ : *default_instance().obj_;
#else
  return obj_ != NULL ? *obj_ : *default_instance_->obj_;
#endif
}
inline ::Mysqlx::Datatypes::Object* Any::mutable_obj() {
  set_has_obj();
  if (obj_ == NULL) obj_ = new ::Mysqlx::Datatypes::Object;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.obj)
  return obj_;
}
inline ::Mysqlx::Datatypes::Object* Any::release_obj() {
  clear_has_obj();
  ::Mysqlx::Datatypes::Object* temp = obj_;
  obj_ = NULL;
  return temp;
}
inline void Any::set_allocated_obj(::Mysqlx::Datatypes::Object* obj) {
  delete obj_;
  obj_ = obj;
  if (obj) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.obj)
}

// optional .Mysqlx.Datatypes.Array array = 4;
inline bool Any::has_array() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Any::set_has_array() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Any::clear_has_array() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Any::clear_array() {
  if (array_ != NULL) array_->::Mysqlx::Datatypes::Array::Clear();
  clear_has_array();
}
inline const ::Mysqlx::Datatypes::Array& Any::array() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.array)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return array_ != NULL ? *array_ : *default_instance().array_;
#else
  return array_ != NULL ? *array_ : *default_instance_->array_;
#endif
}
inline ::Mysqlx::Datatypes::Array* Any::mutable_array() {
  set_has_array();
  if (array_ == NULL) array_ = new ::Mysqlx::Datatypes::Array;
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.array)
  return array_;
}
inline ::Mysqlx::Datatypes::Array* Any::release_array() {
  clear_has_array();
  ::Mysqlx::Datatypes::Array* temp = array_;
  array_ = NULL;
  return temp;
}
inline void Any::set_allocated_array(::Mysqlx::Datatypes::Array* array) {
  delete array_;
  array_ = array;
  if (array) {
    set_has_array();
  } else {
    clear_has_array();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.array)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Datatypes
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysqlx_5fdatatypes_2eproto__INCLUDED
