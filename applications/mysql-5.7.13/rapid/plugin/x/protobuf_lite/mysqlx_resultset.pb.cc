// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_resultset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Resultset {

void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto() {
  delete FetchDoneMoreOutParams::default_instance_;
  delete FetchDoneMoreResultsets::default_instance_;
  delete FetchDone::default_instance_;
  delete ColumnMetaData::default_instance_;
  delete Row::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mysqlx_5fresultset_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mysqlx_5fresultset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FetchDoneMoreOutParams::default_instance_ = new FetchDoneMoreOutParams();
  FetchDoneMoreResultsets::default_instance_ = new FetchDoneMoreResultsets();
  FetchDone::default_instance_ = new FetchDone();
  ColumnMetaData::default_instance_ = new ColumnMetaData();
  Row::default_instance_ = new Row();
  FetchDoneMoreOutParams::default_instance_->InitAsDefaultInstance();
  FetchDoneMoreResultsets::default_instance_->InitAsDefaultInstance();
  FetchDone::default_instance_->InitAsDefaultInstance();
  ColumnMetaData::default_instance_->InitAsDefaultInstance();
  Row::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fresultset_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mysqlx_5fresultset_2eproto_once_);
void protobuf_AddDesc_mysqlx_5fresultset_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mysqlx_5fresultset_2eproto_once_,
                 &protobuf_AddDesc_mysqlx_5fresultset_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fresultset_2eproto {
  StaticDescriptorInitializer_mysqlx_5fresultset_2eproto() {
    protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fresultset_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FetchDoneMoreOutParams::FetchDoneMoreOutParams()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

void FetchDoneMoreOutParams::InitAsDefaultInstance() {
}

FetchDoneMoreOutParams::FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

void FetchDoneMoreOutParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchDoneMoreOutParams::~FetchDoneMoreOutParams() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
  SharedDtor();
}

void FetchDoneMoreOutParams::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FetchDoneMoreOutParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FetchDoneMoreOutParams& FetchDoneMoreOutParams::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#endif
  return *default_instance_;
}

FetchDoneMoreOutParams* FetchDoneMoreOutParams::default_instance_ = NULL;

FetchDoneMoreOutParams* FetchDoneMoreOutParams::New() const {
  return new FetchDoneMoreOutParams;
}

void FetchDoneMoreOutParams::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FetchDoneMoreOutParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return false;
#undef DO_
}

void FetchDoneMoreOutParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

int FetchDoneMoreOutParams::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDoneMoreOutParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDoneMoreOutParams*>(&from));
}

void FetchDoneMoreOutParams::MergeFrom(const FetchDoneMoreOutParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FetchDoneMoreOutParams::CopyFrom(const FetchDoneMoreOutParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreOutParams::IsInitialized() const {

  return true;
}

void FetchDoneMoreOutParams::Swap(FetchDoneMoreOutParams* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FetchDoneMoreOutParams::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreOutParams";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FetchDoneMoreResultsets::FetchDoneMoreResultsets()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

void FetchDoneMoreResultsets::InitAsDefaultInstance() {
}

FetchDoneMoreResultsets::FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

void FetchDoneMoreResultsets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchDoneMoreResultsets::~FetchDoneMoreResultsets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
  SharedDtor();
}

void FetchDoneMoreResultsets::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FetchDoneMoreResultsets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FetchDoneMoreResultsets& FetchDoneMoreResultsets::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#endif
  return *default_instance_;
}

FetchDoneMoreResultsets* FetchDoneMoreResultsets::default_instance_ = NULL;

FetchDoneMoreResultsets* FetchDoneMoreResultsets::New() const {
  return new FetchDoneMoreResultsets;
}

void FetchDoneMoreResultsets::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FetchDoneMoreResultsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return false;
#undef DO_
}

void FetchDoneMoreResultsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

int FetchDoneMoreResultsets::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDoneMoreResultsets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDoneMoreResultsets*>(&from));
}

void FetchDoneMoreResultsets::MergeFrom(const FetchDoneMoreResultsets& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FetchDoneMoreResultsets::CopyFrom(const FetchDoneMoreResultsets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreResultsets::IsInitialized() const {

  return true;
}

void FetchDoneMoreResultsets::Swap(FetchDoneMoreResultsets* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FetchDoneMoreResultsets::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreResultsets";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FetchDone::FetchDone()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDone)
}

void FetchDone::InitAsDefaultInstance() {
}

FetchDone::FetchDone(const FetchDone& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDone)
}

void FetchDone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchDone::~FetchDone() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDone)
  SharedDtor();
}

void FetchDone::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FetchDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FetchDone& FetchDone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#endif
  return *default_instance_;
}

FetchDone* FetchDone::default_instance_ = NULL;

FetchDone* FetchDone::New() const {
  return new FetchDone;
}

void FetchDone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FetchDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDone)
  return false;
#undef DO_
}

void FetchDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDone)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDone)
}

int FetchDone::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDone*>(&from));
}

void FetchDone::MergeFrom(const FetchDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FetchDone::CopyFrom(const FetchDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDone::IsInitialized() const {

  return true;
}

void FetchDone::Swap(FetchDone* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FetchDone::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDone";
}


// ===================================================================

bool ColumnMetaData_FieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnMetaData_FieldType ColumnMetaData::SINT;
const ColumnMetaData_FieldType ColumnMetaData::UINT;
const ColumnMetaData_FieldType ColumnMetaData::DOUBLE;
const ColumnMetaData_FieldType ColumnMetaData::FLOAT;
const ColumnMetaData_FieldType ColumnMetaData::BYTES;
const ColumnMetaData_FieldType ColumnMetaData::TIME;
const ColumnMetaData_FieldType ColumnMetaData::DATETIME;
const ColumnMetaData_FieldType ColumnMetaData::SET;
const ColumnMetaData_FieldType ColumnMetaData::ENUM;
const ColumnMetaData_FieldType ColumnMetaData::BIT;
const ColumnMetaData_FieldType ColumnMetaData::DECIMAL;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MIN;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MAX;
const int ColumnMetaData::FieldType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnMetaData::kTypeFieldNumber;
const int ColumnMetaData::kNameFieldNumber;
const int ColumnMetaData::kOriginalNameFieldNumber;
const int ColumnMetaData::kTableFieldNumber;
const int ColumnMetaData::kOriginalTableFieldNumber;
const int ColumnMetaData::kSchemaFieldNumber;
const int ColumnMetaData::kCatalogFieldNumber;
const int ColumnMetaData::kCollationFieldNumber;
const int ColumnMetaData::kFractionalDigitsFieldNumber;
const int ColumnMetaData::kLengthFieldNumber;
const int ColumnMetaData::kFlagsFieldNumber;
const int ColumnMetaData::kContentTypeFieldNumber;
#endif  // !_MSC_VER

ColumnMetaData::ColumnMetaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.ColumnMetaData)
}

void ColumnMetaData::InitAsDefaultInstance() {
}

ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.ColumnMetaData)
}

void ColumnMetaData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collation_ = GOOGLE_ULONGLONG(0);
  fractional_digits_ = 0u;
  length_ = 0u;
  flags_ = 0u;
  content_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnMetaData::~ColumnMetaData() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.ColumnMetaData)
  SharedDtor();
}

void ColumnMetaData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (original_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_name_;
  }
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (original_table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_table_;
  }
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_;
  }
  if (catalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete catalog_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ColumnMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ColumnMetaData& ColumnMetaData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#endif
  return *default_instance_;
}

ColumnMetaData* ColumnMetaData::default_instance_ = NULL;

ColumnMetaData* ColumnMetaData::New() const {
  return new ColumnMetaData;
}

void ColumnMetaData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnMetaData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_original_name()) {
      if (original_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        original_name_->clear();
      }
    }
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_original_table()) {
      if (original_table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        original_table_->clear();
      }
    }
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schema_->clear();
      }
    }
    if (has_catalog()) {
      if (catalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        catalog_->clear();
      }
    }
    collation_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(length_, content_type_);
    fractional_digits_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ColumnMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.ColumnMetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_original_name;
        break;
      }

      // optional bytes original_name = 3;
      case 3: {
        if (tag == 26) {
         parse_original_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_table;
        break;
      }

      // optional bytes table = 4;
      case 4: {
        if (tag == 34) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_original_table;
        break;
      }

      // optional bytes original_table = 5;
      case 5: {
        if (tag == 42) {
         parse_original_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_schema;
        break;
      }

      // optional bytes schema = 6;
      case 6: {
        if (tag == 50) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_catalog;
        break;
      }

      // optional bytes catalog = 7;
      case 7: {
        if (tag == 58) {
         parse_catalog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_catalog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_collation;
        break;
      }

      // optional uint64 collation = 8;
      case 8: {
        if (tag == 64) {
         parse_collation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
          set_has_collation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fractional_digits;
        break;
      }

      // optional uint32 fractional_digits = 9;
      case 9: {
        if (tag == 72) {
         parse_fractional_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractional_digits_)));
          set_has_fractional_digits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_length;
        break;
      }

      // optional uint32 length = 10;
      case 10: {
        if (tag == 80) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (tag == 88) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_content_type;
        break;
      }

      // optional uint32 content_type = 12;
      case 12: {
        if (tag == 96) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.ColumnMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.ColumnMetaData)
  return false;
#undef DO_
}

void ColumnMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.ColumnMetaData)
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes original_name = 3;
  if (has_original_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->original_name(), output);
  }

  // optional bytes table = 4;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->table(), output);
  }

  // optional bytes original_table = 5;
  if (has_original_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->original_table(), output);
  }

  // optional bytes schema = 6;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->schema(), output);
  }

  // optional bytes catalog = 7;
  if (has_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->catalog(), output);
  }

  // optional uint64 collation = 8;
  if (has_collation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->collation(), output);
  }

  // optional uint32 fractional_digits = 9;
  if (has_fractional_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fractional_digits(), output);
  }

  // optional uint32 length = 10;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->length(), output);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 content_type = 12;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->content_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.ColumnMetaData)
}

int ColumnMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes original_name = 3;
    if (has_original_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_name());
    }

    // optional bytes table = 4;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes original_table = 5;
    if (has_original_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_table());
    }

    // optional bytes schema = 6;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional bytes catalog = 7;
    if (has_catalog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->catalog());
    }

    // optional uint64 collation = 8;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fractional_digits = 9;
    if (has_fractional_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractional_digits());
    }

    // optional uint32 length = 10;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 content_type = 12;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColumnMetaData*>(&from));
}

void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_original_name()) {
      set_original_name(from.original_name());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_original_table()) {
      set_original_table(from.original_table());
    }
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_catalog()) {
      set_catalog(from.catalog());
    }
    if (from.has_collation()) {
      set_collation(from.collation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fractional_digits()) {
      set_fractional_digits(from.fractional_digits());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ColumnMetaData::Swap(ColumnMetaData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(original_name_, other->original_name_);
    std::swap(table_, other->table_);
    std::swap(original_table_, other->original_table_);
    std::swap(schema_, other->schema_);
    std::swap(catalog_, other->catalog_);
    std::swap(collation_, other->collation_);
    std::swap(fractional_digits_, other->fractional_digits_);
    std::swap(length_, other->length_);
    std::swap(flags_, other->flags_);
    std::swap(content_type_, other->content_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ColumnMetaData::GetTypeName() const {
  return "Mysqlx.Resultset.ColumnMetaData";
}


// ===================================================================

#ifndef _MSC_VER
const int Row::kFieldFieldNumber;
#endif  // !_MSC_VER

Row::Row()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.Row)
}

void Row::InitAsDefaultInstance() {
}

Row::Row(const Row& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.Row)
}

void Row::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Row& Row::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fresultset_2eproto();
#endif
  return *default_instance_;
}

Row* Row::default_instance_ = NULL;

Row* Row::New() const {
  return new Row;
}

void Row::Clear() {
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes field = 1;
      case 1: {
        if (tag == 10) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.Row)
  // repeated bytes field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->field(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.Row)
}

int Row::ByteSize() const {
  int total_size = 0;

  // repeated bytes field = 1;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->field(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Row*>(&from));
}

void Row::MergeFrom(const Row& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Row::CopyFrom(const Row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {

  return true;
}

void Row::Swap(Row* other) {
  if (other != this) {
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Row::GetTypeName() const {
  return "Mysqlx.Resultset.Row";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Resultset
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
