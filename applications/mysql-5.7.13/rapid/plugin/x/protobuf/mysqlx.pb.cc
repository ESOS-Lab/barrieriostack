// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {

namespace {

const ::google::protobuf::Descriptor* ClientMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessages_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessages_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessages_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMessages_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Ok_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ok_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Severity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_2eproto() {
  protobuf_AddDesc_mysqlx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx.proto");
  GOOGLE_CHECK(file != NULL);
  ClientMessages_descriptor_ = file->message_type(0);
  static const int ClientMessages_offsets_[1] = {
  };
  ClientMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessages_descriptor_,
      ClientMessages::default_instance_,
      ClientMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessages));
  ClientMessages_Type_descriptor_ = ClientMessages_descriptor_->enum_type(0);
  ServerMessages_descriptor_ = file->message_type(1);
  static const int ServerMessages_offsets_[1] = {
  };
  ServerMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessages_descriptor_,
      ServerMessages::default_instance_,
      ServerMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessages));
  ServerMessages_Type_descriptor_ = ServerMessages_descriptor_->enum_type(0);
  Ok_descriptor_ = file->message_type(2);
  static const int Ok_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, msg_),
  };
  Ok_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ok_descriptor_,
      Ok::default_instance_,
      Ok_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ok));
  Error_descriptor_ = file->message_type(3);
  static const int Error_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, sql_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_Severity_descriptor_ = Error_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessages_descriptor_, &ClientMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessages_descriptor_, &ServerMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ok_descriptor_, &Ok::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_2eproto() {
  delete ClientMessages::default_instance_;
  delete ClientMessages_reflection_;
  delete ServerMessages::default_instance_;
  delete ServerMessages_reflection_;
  delete Ok::default_instance_;
  delete Ok_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_mysqlx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Sql::protobuf_AddDesc_mysqlx_5fsql_2eproto();
  ::Mysqlx::Resultset::protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  ::Mysqlx::Crud::protobuf_AddDesc_mysqlx_5fcrud_2eproto();
  ::Mysqlx::Session::protobuf_AddDesc_mysqlx_5fsession_2eproto();
  ::Mysqlx::Connection::protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  ::Mysqlx::Expect::protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  ::Mysqlx::Notice::protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mysqlx.proto\022\006Mysqlx\032\020mysqlx_sql.proto"
    "\032\026mysqlx_resultset.proto\032\021mysqlx_crud.pr"
    "oto\032\024mysqlx_session.proto\032\027mysqlx_connec"
    "tion.proto\032\023mysqlx_expect.proto\032\023mysqlx_"
    "notice.proto\"\264\002\n\016ClientMessages\"\241\002\n\004Type"
    "\022\030\n\024CON_CAPABILITIES_GET\020\001\022\030\n\024CON_CAPABI"
    "LITIES_SET\020\002\022\r\n\tCON_CLOSE\020\003\022\033\n\027SESS_AUTH"
    "ENTICATE_START\020\004\022\036\n\032SESS_AUTHENTICATE_CO"
    "NTINUE\020\005\022\016\n\nSESS_RESET\020\006\022\016\n\nSESS_CLOSE\020\007"
    "\022\024\n\020SQL_STMT_EXECUTE\020\014\022\r\n\tCRUD_FIND\020\021\022\017\n"
    "\013CRUD_INSERT\020\022\022\017\n\013CRUD_UPDATE\020\023\022\017\n\013CRUD_"
    "DELETE\020\024\022\017\n\013EXPECT_OPEN\020\030\022\020\n\014EXPECT_CLOS"
    "E\020\031\"\342\002\n\016ServerMessages\"\317\002\n\004Type\022\006\n\002OK\020\000\022"
    "\t\n\005ERROR\020\001\022\025\n\021CONN_CAPABILITIES\020\002\022\036\n\032SES"
    "S_AUTHENTICATE_CONTINUE\020\003\022\030\n\024SESS_AUTHEN"
    "TICATE_OK\020\004\022\n\n\006NOTICE\020\013\022\036\n\032RESULTSET_COL"
    "UMN_META_DATA\020\014\022\021\n\rRESULTSET_ROW\020\r\022\030\n\024RE"
    "SULTSET_FETCH_DONE\020\016\022\035\n\031RESULTSET_FETCH_"
    "SUSPENDED\020\017\022(\n$RESULTSET_FETCH_DONE_MORE"
    "_RESULTSETS\020\020\022\027\n\023SQL_STMT_EXECUTE_OK\020\021\022("
    "\n$RESULTSET_FETCH_DONE_MORE_OUT_PARAMS\020\022"
    "\"\021\n\002Ok\022\013\n\003msg\030\001 \001(\t\"\210\001\n\005Error\022/\n\010severit"
    "y\030\001 \001(\0162\026.Mysqlx.Error.Severity:\005ERROR\022\014"
    "\n\004code\030\002 \002(\r\022\021\n\tsql_state\030\004 \002(\t\022\013\n\003msg\030\003"
    " \002(\t\" \n\010Severity\022\t\n\005ERROR\020\000\022\t\n\005FATAL\020\001B\036"
    "\n\034com.mysql.cj.mysqlx.protobuf", 1030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx.proto", &protobuf_RegisterTypes);
  ClientMessages::default_instance_ = new ClientMessages();
  ServerMessages::default_instance_ = new ServerMessages();
  Ok::default_instance_ = new Ok();
  Error::default_instance_ = new Error();
  ClientMessages::default_instance_->InitAsDefaultInstance();
  ServerMessages::default_instance_->InitAsDefaultInstance();
  Ok::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_2eproto {
  StaticDescriptorInitializer_mysqlx_2eproto() {
    protobuf_AddDesc_mysqlx_2eproto();
  }
} static_descriptor_initializer_mysqlx_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessages_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessages_Type_descriptor_;
}
bool ClientMessages_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
const ClientMessages_Type ClientMessages::CON_CLOSE;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
const ClientMessages_Type ClientMessages::SESS_RESET;
const ClientMessages_Type ClientMessages::SESS_CLOSE;
const ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
const ClientMessages_Type ClientMessages::CRUD_FIND;
const ClientMessages_Type ClientMessages::CRUD_INSERT;
const ClientMessages_Type ClientMessages::CRUD_UPDATE;
const ClientMessages_Type ClientMessages::CRUD_DELETE;
const ClientMessages_Type ClientMessages::EXPECT_OPEN;
const ClientMessages_Type ClientMessages::EXPECT_CLOSE;
const ClientMessages_Type ClientMessages::Type_MIN;
const ClientMessages_Type ClientMessages::Type_MAX;
const int ClientMessages::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientMessages::ClientMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ClientMessages)
}

void ClientMessages::InitAsDefaultInstance() {
}

ClientMessages::ClientMessages(const ClientMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ClientMessages)
}

void ClientMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessages::~ClientMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ClientMessages)
  SharedDtor();
}

void ClientMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessages_descriptor_;
}

const ClientMessages& ClientMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_2eproto();
  return *default_instance_;
}

ClientMessages* ClientMessages::default_instance_ = NULL;

ClientMessages* ClientMessages::New() const {
  return new ClientMessages;
}

void ClientMessages::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.ClientMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ClientMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ClientMessages)
  return false;
#undef DO_
}

void ClientMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ClientMessages)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.ClientMessages)
}

::google::protobuf::uint8* ClientMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ClientMessages)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ClientMessages)
  return target;
}

int ClientMessages::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessages::MergeFrom(const ClientMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessages::CopyFrom(const ClientMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessages::IsInitialized() const {

  return true;
}

void ClientMessages::Swap(ClientMessages* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessages_descriptor_;
  metadata.reflection = ClientMessages_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerMessages_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessages_Type_descriptor_;
}
bool ServerMessages_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerMessages_Type ServerMessages::OK;
const ServerMessages_Type ServerMessages::ERROR;
const ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
const ServerMessages_Type ServerMessages::NOTICE;
const ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
const ServerMessages_Type ServerMessages::RESULTSET_ROW;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
const ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
const ServerMessages_Type ServerMessages::Type_MIN;
const ServerMessages_Type ServerMessages::Type_MAX;
const int ServerMessages::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerMessages::ServerMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ServerMessages)
}

void ServerMessages::InitAsDefaultInstance() {
}

ServerMessages::ServerMessages(const ServerMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ServerMessages)
}

void ServerMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessages::~ServerMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ServerMessages)
  SharedDtor();
}

void ServerMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessages_descriptor_;
}

const ServerMessages& ServerMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_2eproto();
  return *default_instance_;
}

ServerMessages* ServerMessages::default_instance_ = NULL;

ServerMessages* ServerMessages::New() const {
  return new ServerMessages;
}

void ServerMessages::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.ServerMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ServerMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ServerMessages)
  return false;
#undef DO_
}

void ServerMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ServerMessages)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.ServerMessages)
}

::google::protobuf::uint8* ServerMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ServerMessages)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ServerMessages)
  return target;
}

int ServerMessages::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessages::MergeFrom(const ServerMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessages::CopyFrom(const ServerMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessages::IsInitialized() const {

  return true;
}

void ServerMessages::Swap(ServerMessages* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessages_descriptor_;
  metadata.reflection = ServerMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ok::kMsgFieldNumber;
#endif  // !_MSC_VER

Ok::Ok()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Ok)
}

void Ok::InitAsDefaultInstance() {
}

Ok::Ok(const Ok& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Ok)
}

void Ok::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:Mysqlx.Ok)
  SharedDtor();
}

void Ok::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Ok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ok::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ok_descriptor_;
}

const Ok& Ok::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_2eproto();
  return *default_instance_;
}

Ok* Ok::default_instance_ = NULL;

Ok* Ok::New() const {
  return new Ok;
}

void Ok::Clear() {
  if (has_msg()) {
    if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      msg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Ok)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Ok)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Ok)
  return false;
#undef DO_
}

void Ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Ok)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Ok)
}

::google::protobuf::uint8* Ok::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Ok)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Ok)
  return target;
}

int Ok::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ok::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ok* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ok*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ok::MergeFrom(const Ok& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ok::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ok::CopyFrom(const Ok& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {

  return true;
}

void Ok::Swap(Ok* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ok::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ok_descriptor_;
  metadata.reflection = Ok_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Severity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Severity_descriptor_;
}
bool Error_Severity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_Severity Error::ERROR;
const Error_Severity Error::FATAL;
const Error_Severity Error::Severity_MIN;
const Error_Severity Error::Severity_MAX;
const int Error::Severity_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Error::kSeverityFieldNumber;
const int Error::kCodeFieldNumber;
const int Error::kSqlStateFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  severity_ = 0;
  code_ = 0u;
  sql_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:Mysqlx.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (sql_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_state_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Error*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(severity_, code_);
    if (has_sql_state()) {
      if (sql_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_state_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Error_Severity_IsValid(value)) {
            set_severity(static_cast< ::Mysqlx::Error_Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sql_state;
        break;
      }

      // required string sql_state = 4;
      case 4: {
        if (tag == 34) {
         parse_sql_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_state().data(), this->sql_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Error)
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->severity(), output);
  }

  // required uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // required string sql_state = 4;
  if (has_sql_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_state().data(), this->sql_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sql_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Error)
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->severity(), target);
  }

  // required uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // required string sql_state = 4;
  if (has_sql_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_state().data(), this->sql_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sql_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // required uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required string sql_state = 4;
    if (has_sql_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_state());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_sql_state()) {
      set_sql_state(from.sql_state());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(severity_, other->severity_);
    std::swap(code_, other->code_);
    std::swap(sql_state_, other->sql_state_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
