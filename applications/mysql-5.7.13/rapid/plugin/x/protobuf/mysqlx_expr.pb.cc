// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Expr {

namespace {

const ::google::protobuf::Descriptor* Expr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Expr_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Identifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Identifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentPathItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentPathItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DocumentPathItem_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnIdentifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_ObjectField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_ObjectField_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_5fexpr_2eproto() {
  protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx_expr.proto");
  GOOGLE_CHECK(file != NULL);
  Expr_descriptor_ = file->message_type(0);
  static const int Expr_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, literal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, function_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, array_),
  };
  Expr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_descriptor_,
      Expr::default_instance_,
      Expr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr));
  Expr_Type_descriptor_ = Expr_descriptor_->enum_type(0);
  Identifier_descriptor_ = file->message_type(1);
  static const int Identifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, schema_name_),
  };
  Identifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Identifier_descriptor_,
      Identifier::default_instance_,
      Identifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Identifier));
  DocumentPathItem_descriptor_ = file->message_type(2);
  static const int DocumentPathItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, index_),
  };
  DocumentPathItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentPathItem_descriptor_,
      DocumentPathItem::default_instance_,
      DocumentPathItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentPathItem));
  DocumentPathItem_Type_descriptor_ = DocumentPathItem_descriptor_->enum_type(0);
  ColumnIdentifier_descriptor_ = file->message_type(3);
  static const int ColumnIdentifier_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, document_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, schema_name_),
  };
  ColumnIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnIdentifier_descriptor_,
      ColumnIdentifier::default_instance_,
      ColumnIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnIdentifier));
  FunctionCall_descriptor_ = file->message_type(4);
  static const int FunctionCall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, param_),
  };
  FunctionCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionCall_descriptor_,
      FunctionCall::default_instance_,
      FunctionCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionCall));
  Operator_descriptor_ = file->message_type(5);
  static const int Operator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, param_),
  };
  Operator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operator_descriptor_,
      Operator::default_instance_,
      Operator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operator));
  Object_descriptor_ = file->message_type(6);
  static const int Object_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, fld_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  Object_ObjectField_descriptor_ = Object_descriptor_->nested_type(0);
  static const int Object_ObjectField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, value_),
  };
  Object_ObjectField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_ObjectField_descriptor_,
      Object_ObjectField::default_instance_,
      Object_ObjectField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object_ObjectField));
  Array_descriptor_ = file->message_type(7);
  static const int Array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, value_),
  };
  Array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array_descriptor_,
      Array::default_instance_,
      Array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_5fexpr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_descriptor_, &Expr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Identifier_descriptor_, &Identifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentPathItem_descriptor_, &DocumentPathItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnIdentifier_descriptor_, &ColumnIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionCall_descriptor_, &FunctionCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operator_descriptor_, &Operator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_ObjectField_descriptor_, &Object_ObjectField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array_descriptor_, &Array::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_5fexpr_2eproto() {
  delete Expr::default_instance_;
  delete Expr_reflection_;
  delete Identifier::default_instance_;
  delete Identifier_reflection_;
  delete DocumentPathItem::default_instance_;
  delete DocumentPathItem_reflection_;
  delete ColumnIdentifier::default_instance_;
  delete ColumnIdentifier_reflection_;
  delete FunctionCall::default_instance_;
  delete FunctionCall_reflection_;
  delete Operator::default_instance_;
  delete Operator_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete Object_ObjectField::default_instance_;
  delete Object_ObjectField_reflection_;
  delete Array::default_instance_;
  delete Array_reflection_;
}

void protobuf_AddDesc_mysqlx_5fexpr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Datatypes::protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021mysqlx_expr.proto\022\013Mysqlx.Expr\032\026mysqlx"
    "_datatypes.proto\"\304\003\n\004Expr\022$\n\004type\030\001 \002(\0162"
    "\026.Mysqlx.Expr.Expr.Type\0221\n\nidentifier\030\002 "
    "\001(\0132\035.Mysqlx.Expr.ColumnIdentifier\022\020\n\010va"
    "riable\030\003 \001(\t\022)\n\007literal\030\004 \001(\0132\030.Mysqlx.D"
    "atatypes.Scalar\0220\n\rfunction_call\030\005 \001(\0132\031"
    ".Mysqlx.Expr.FunctionCall\022\'\n\010operator\030\006 "
    "\001(\0132\025.Mysqlx.Expr.Operator\022\020\n\010position\030\007"
    " \001(\r\022#\n\006object\030\010 \001(\0132\023.Mysqlx.Expr.Objec"
    "t\022!\n\005array\030\t \001(\0132\022.Mysqlx.Expr.Array\"q\n\004"
    "Type\022\t\n\005IDENT\020\001\022\013\n\007LITERAL\020\002\022\014\n\010VARIABLE"
    "\020\003\022\r\n\tFUNC_CALL\020\004\022\014\n\010OPERATOR\020\005\022\017\n\013PLACE"
    "HOLDER\020\006\022\n\n\006OBJECT\020\007\022\t\n\005ARRAY\020\010\"/\n\nIdent"
    "ifier\022\014\n\004name\030\001 \002(\t\022\023\n\013schema_name\030\002 \001(\t"
    "\"\313\001\n\020DocumentPathItem\0220\n\004type\030\001 \002(\0162\".My"
    "sqlx.Expr.DocumentPathItem.Type\022\r\n\005value"
    "\030\002 \001(\t\022\r\n\005index\030\003 \001(\r\"g\n\004Type\022\n\n\006MEMBER\020"
    "\001\022\023\n\017MEMBER_ASTERISK\020\002\022\017\n\013ARRAY_INDEX\020\003\022"
    "\030\n\024ARRAY_INDEX_ASTERISK\020\004\022\023\n\017DOUBLE_ASTE"
    "RISK\020\005\"\177\n\020ColumnIdentifier\0224\n\rdocument_p"
    "ath\030\001 \003(\0132\035.Mysqlx.Expr.DocumentPathItem"
    "\022\014\n\004name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022\023\n\013sc"
    "hema_name\030\004 \001(\t\"W\n\014FunctionCall\022%\n\004name\030"
    "\001 \002(\0132\027.Mysqlx.Expr.Identifier\022 \n\005param\030"
    "\002 \003(\0132\021.Mysqlx.Expr.Expr\":\n\010Operator\022\014\n\004"
    "name\030\001 \002(\t\022 \n\005param\030\002 \003(\0132\021.Mysqlx.Expr."
    "Expr\"t\n\006Object\022,\n\003fld\030\001 \003(\0132\037.Mysqlx.Exp"
    "r.Object.ObjectField\032<\n\013ObjectField\022\013\n\003k"
    "ey\030\001 \002(\t\022 \n\005value\030\002 \002(\0132\021.Mysqlx.Expr.Ex"
    "pr\")\n\005Array\022 \n\005value\030\001 \003(\0132\021.Mysqlx.Expr"
    ".ExprB\036\n\034com.mysql.cj.mysqlx.protobuf", 1237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expr.proto", &protobuf_RegisterTypes);
  Expr::default_instance_ = new Expr();
  Identifier::default_instance_ = new Identifier();
  DocumentPathItem::default_instance_ = new DocumentPathItem();
  ColumnIdentifier::default_instance_ = new ColumnIdentifier();
  FunctionCall::default_instance_ = new FunctionCall();
  Operator::default_instance_ = new Operator();
  Object::default_instance_ = new Object();
  Object_ObjectField::default_instance_ = new Object_ObjectField();
  Array::default_instance_ = new Array();
  Expr::default_instance_->InitAsDefaultInstance();
  Identifier::default_instance_->InitAsDefaultInstance();
  DocumentPathItem::default_instance_->InitAsDefaultInstance();
  ColumnIdentifier::default_instance_->InitAsDefaultInstance();
  FunctionCall::default_instance_->InitAsDefaultInstance();
  Operator::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Object_ObjectField::default_instance_->InitAsDefaultInstance();
  Array::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fexpr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fexpr_2eproto {
  StaticDescriptorInitializer_mysqlx_5fexpr_2eproto() {
    protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fexpr_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Expr_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_Type_descriptor_;
}
bool Expr_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Expr_Type Expr::IDENT;
const Expr_Type Expr::LITERAL;
const Expr_Type Expr::VARIABLE;
const Expr_Type Expr::FUNC_CALL;
const Expr_Type Expr::OPERATOR;
const Expr_Type Expr::PLACEHOLDER;
const Expr_Type Expr::OBJECT;
const Expr_Type Expr::ARRAY;
const Expr_Type Expr::Type_MIN;
const Expr_Type Expr::Type_MAX;
const int Expr::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Expr::kTypeFieldNumber;
const int Expr::kIdentifierFieldNumber;
const int Expr::kVariableFieldNumber;
const int Expr::kLiteralFieldNumber;
const int Expr::kFunctionCallFieldNumber;
const int Expr::kOperatorFieldNumber;
const int Expr::kPositionFieldNumber;
const int Expr::kObjectFieldNumber;
const int Expr::kArrayFieldNumber;
#endif  // !_MSC_VER

Expr::Expr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Expr)
}

void Expr::InitAsDefaultInstance() {
  identifier_ = const_cast< ::Mysqlx::Expr::ColumnIdentifier*>(&::Mysqlx::Expr::ColumnIdentifier::default_instance());
  literal_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(&::Mysqlx::Datatypes::Scalar::default_instance());
  function_call_ = const_cast< ::Mysqlx::Expr::FunctionCall*>(&::Mysqlx::Expr::FunctionCall::default_instance());
  operator__ = const_cast< ::Mysqlx::Expr::Operator*>(&::Mysqlx::Expr::Operator::default_instance());
  object_ = const_cast< ::Mysqlx::Expr::Object*>(&::Mysqlx::Expr::Object::default_instance());
  array_ = const_cast< ::Mysqlx::Expr::Array*>(&::Mysqlx::Expr::Array::default_instance());
}

Expr::Expr(const Expr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Expr)
}

void Expr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  identifier_ = NULL;
  variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  literal_ = NULL;
  function_call_ = NULL;
  operator__ = NULL;
  position_ = 0u;
  object_ = NULL;
  array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Expr)
  SharedDtor();
}

void Expr::SharedDtor() {
  if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variable_;
  }
  if (this != default_instance_) {
    delete identifier_;
    delete literal_;
    delete function_call_;
    delete operator__;
    delete object_;
    delete array_;
  }
}

void Expr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_descriptor_;
}

const Expr& Expr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Expr* Expr::default_instance_ = NULL;

Expr* Expr::New() const {
  return new Expr;
}

void Expr::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_identifier()) {
      if (identifier_ != NULL) identifier_->::Mysqlx::Expr::ColumnIdentifier::Clear();
    }
    if (has_variable()) {
      if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        variable_->clear();
      }
    }
    if (has_literal()) {
      if (literal_ != NULL) literal_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    if (has_function_call()) {
      if (function_call_ != NULL) function_call_->::Mysqlx::Expr::FunctionCall::Clear();
    }
    if (has_operator_()) {
      if (operator__ != NULL) operator__->::Mysqlx::Expr::Operator::Clear();
    }
    position_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::Mysqlx::Expr::Object::Clear();
    }
  }
  if (has_array()) {
    if (array_ != NULL) array_->::Mysqlx::Expr::Array::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Expr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Expr.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::Expr_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::Expr_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }

      // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
      case 2: {
        if (tag == 18) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variable;
        break;
      }

      // optional string variable = 3;
      case 3: {
        if (tag == 26) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variable().data(), this->variable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "variable");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_literal;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar literal = 4;
      case 4: {
        if (tag == 34) {
         parse_literal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_function_call;
        break;
      }

      // optional .Mysqlx.Expr.FunctionCall function_call = 5;
      case 5: {
        if (tag == 42) {
         parse_function_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_function_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_operator;
        break;
      }

      // optional .Mysqlx.Expr.Operator operator = 6;
      case 6: {
        if (tag == 50) {
         parse_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operator_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_position;
        break;
      }

      // optional uint32 position = 7;
      case 7: {
        if (tag == 56) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_object;
        break;
      }

      // optional .Mysqlx.Expr.Object object = 8;
      case 8: {
        if (tag == 66) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_array;
        break;
      }

      // optional .Mysqlx.Expr.Array array = 9;
      case 9: {
        if (tag == 74) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Expr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Expr)
  return false;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Expr)
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->identifier(), output);
  }

  // optional string variable = 3;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->variable(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->literal(), output);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (has_function_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->function_call(), output);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->operator_(), output);
  }

  // optional uint32 position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->position(), output);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->object(), output);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->array(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Expr)
}

::google::protobuf::uint8* Expr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Expr)
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->identifier(), target);
  }

  // optional string variable = 3;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->variable(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->literal(), target);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (has_function_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->function_call(), target);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->operator_(), target);
  }

  // optional uint32 position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->position(), target);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->object(), target);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (has_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->array(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Expr)
  return target;
}

int Expr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Expr.Expr.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identifier());
    }

    // optional string variable = 3;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variable());
    }

    // optional .Mysqlx.Datatypes.Scalar literal = 4;
    if (has_literal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->literal());
    }

    // optional .Mysqlx.Expr.FunctionCall function_call = 5;
    if (has_function_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->function_call());
    }

    // optional .Mysqlx.Expr.Operator operator = 6;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operator_());
    }

    // optional uint32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional .Mysqlx.Expr.Object object = 8;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Mysqlx.Expr.Array array = 9;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_identifier()) {
      mutable_identifier()->::Mysqlx::Expr::ColumnIdentifier::MergeFrom(from.identifier());
    }
    if (from.has_variable()) {
      set_variable(from.variable());
    }
    if (from.has_literal()) {
      mutable_literal()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.literal());
    }
    if (from.has_function_call()) {
      mutable_function_call()->::Mysqlx::Expr::FunctionCall::MergeFrom(from.function_call());
    }
    if (from.has_operator_()) {
      mutable_operator_()->::Mysqlx::Expr::Operator::MergeFrom(from.operator_());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_object()) {
      mutable_object()->::Mysqlx::Expr::Object::MergeFrom(from.object());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_array()) {
      mutable_array()->::Mysqlx::Expr::Array::MergeFrom(from.array());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_identifier()) {
    if (!this->identifier().IsInitialized()) return false;
  }
  if (has_literal()) {
    if (!this->literal().IsInitialized()) return false;
  }
  if (has_function_call()) {
    if (!this->function_call().IsInitialized()) return false;
  }
  if (has_operator_()) {
    if (!this->operator_().IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array().IsInitialized()) return false;
  }
  return true;
}

void Expr::Swap(Expr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(identifier_, other->identifier_);
    std::swap(variable_, other->variable_);
    std::swap(literal_, other->literal_);
    std::swap(function_call_, other->function_call_);
    std::swap(operator__, other->operator__);
    std::swap(position_, other->position_);
    std::swap(object_, other->object_);
    std::swap(array_, other->array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_descriptor_;
  metadata.reflection = Expr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Identifier::kNameFieldNumber;
const int Identifier::kSchemaNameFieldNumber;
#endif  // !_MSC_VER

Identifier::Identifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Identifier)
}

void Identifier::InitAsDefaultInstance() {
}

Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Identifier)
}

void Identifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (schema_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_name_;
  }
  if (this != default_instance_) {
  }
}

void Identifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Identifier_descriptor_;
}

const Identifier& Identifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Identifier* Identifier::default_instance_ = NULL;

Identifier* Identifier::New() const {
  return new Identifier;
}

void Identifier::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_schema_name()) {
      if (schema_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schema_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Identifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schema_name;
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (tag == 18) {
         parse_schema_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), this->schema_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "schema_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Identifier)
  return false;
#undef DO_
}

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Identifier)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string schema_name = 2;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Identifier)
}

::google::protobuf::uint8* Identifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Identifier)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string schema_name = 2;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Identifier)
  return target;
}

int Identifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string schema_name = 2;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Identifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Identifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_schema_name()) {
      set_schema_name(from.schema_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(schema_name_, other->schema_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Identifier_descriptor_;
  metadata.reflection = Identifier_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DocumentPathItem_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentPathItem_Type_descriptor_;
}
bool DocumentPathItem_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DocumentPathItem_Type DocumentPathItem::MEMBER;
const DocumentPathItem_Type DocumentPathItem::MEMBER_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::DOUBLE_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::Type_MIN;
const DocumentPathItem_Type DocumentPathItem::Type_MAX;
const int DocumentPathItem::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DocumentPathItem::kTypeFieldNumber;
const int DocumentPathItem::kValueFieldNumber;
const int DocumentPathItem::kIndexFieldNumber;
#endif  // !_MSC_VER

DocumentPathItem::DocumentPathItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.DocumentPathItem)
}

void DocumentPathItem::InitAsDefaultInstance() {
}

DocumentPathItem::DocumentPathItem(const DocumentPathItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.DocumentPathItem)
}

void DocumentPathItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentPathItem::~DocumentPathItem() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.DocumentPathItem)
  SharedDtor();
}

void DocumentPathItem::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DocumentPathItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentPathItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentPathItem_descriptor_;
}

const DocumentPathItem& DocumentPathItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

DocumentPathItem* DocumentPathItem::default_instance_ = NULL;

DocumentPathItem* DocumentPathItem::New() const {
  return new DocumentPathItem;
}

void DocumentPathItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentPathItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.DocumentPathItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::DocumentPathItem_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::DocumentPathItem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.DocumentPathItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.DocumentPathItem)
  return false;
#undef DO_
}

void DocumentPathItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.DocumentPathItem)
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.DocumentPathItem)
}

::google::protobuf::uint8* DocumentPathItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.DocumentPathItem)
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.DocumentPathItem)
  return target;
}

int DocumentPathItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentPathItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentPathItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentPathItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentPathItem::MergeFrom(const DocumentPathItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentPathItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentPathItem::CopyFrom(const DocumentPathItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentPathItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DocumentPathItem::Swap(DocumentPathItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentPathItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentPathItem_descriptor_;
  metadata.reflection = DocumentPathItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnIdentifier::kDocumentPathFieldNumber;
const int ColumnIdentifier::kNameFieldNumber;
const int ColumnIdentifier::kTableNameFieldNumber;
const int ColumnIdentifier::kSchemaNameFieldNumber;
#endif  // !_MSC_VER

ColumnIdentifier::ColumnIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.ColumnIdentifier)
}

void ColumnIdentifier::InitAsDefaultInstance() {
}

ColumnIdentifier::ColumnIdentifier(const ColumnIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.ColumnIdentifier)
}

void ColumnIdentifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnIdentifier::~ColumnIdentifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.ColumnIdentifier)
  SharedDtor();
}

void ColumnIdentifier::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (schema_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_name_;
  }
  if (this != default_instance_) {
  }
}

void ColumnIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnIdentifier_descriptor_;
}

const ColumnIdentifier& ColumnIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

ColumnIdentifier* ColumnIdentifier::default_instance_ = NULL;

ColumnIdentifier* ColumnIdentifier::New() const {
  return new ColumnIdentifier;
}

void ColumnIdentifier::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    if (has_schema_name()) {
      if (schema_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schema_name_->clear();
      }
    }
  }
  document_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.ColumnIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
      case 1: {
        if (tag == 10) {
         parse_document_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_document_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_document_path;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (tag == 26) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_schema_name;
        break;
      }

      // optional string schema_name = 4;
      case 4: {
        if (tag == 34) {
         parse_schema_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), this->schema_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "schema_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.ColumnIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.ColumnIdentifier)
  return false;
#undef DO_
}

void ColumnIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.ColumnIdentifier)
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (int i = 0; i < this->document_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document_path(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string schema_name = 4;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->schema_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.ColumnIdentifier)
}

::google::protobuf::uint8* ColumnIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.ColumnIdentifier)
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (int i = 0; i < this->document_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document_path(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string schema_name = 4;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->schema_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.ColumnIdentifier)
  return target;
}

int ColumnIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string schema_name = 4;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

  }
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  total_size += 1 * this->document_path_size();
  for (int i = 0; i < this->document_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->document_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnIdentifier::MergeFrom(const ColumnIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  document_path_.MergeFrom(from.document_path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_schema_name()) {
      set_schema_name(from.schema_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnIdentifier::CopyFrom(const ColumnIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnIdentifier::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->document_path())) return false;
  return true;
}

void ColumnIdentifier::Swap(ColumnIdentifier* other) {
  if (other != this) {
    document_path_.Swap(&other->document_path_);
    std::swap(name_, other->name_);
    std::swap(table_name_, other->table_name_);
    std::swap(schema_name_, other->schema_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnIdentifier_descriptor_;
  metadata.reflection = ColumnIdentifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCall::kNameFieldNumber;
const int FunctionCall::kParamFieldNumber;
#endif  // !_MSC_VER

FunctionCall::FunctionCall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.FunctionCall)
}

void FunctionCall::InitAsDefaultInstance() {
  name_ = const_cast< ::Mysqlx::Expr::Identifier*>(&::Mysqlx::Expr::Identifier::default_instance());
}

FunctionCall::FunctionCall(const FunctionCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.FunctionCall)
}

void FunctionCall::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.FunctionCall)
  SharedDtor();
}

void FunctionCall::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void FunctionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCall_descriptor_;
}

const FunctionCall& FunctionCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

FunctionCall* FunctionCall::default_instance_ = NULL;

FunctionCall* FunctionCall::New() const {
  return new FunctionCall;
}

void FunctionCall::Clear() {
  if (has_name()) {
    if (name_ != NULL) name_->::Mysqlx::Expr::Identifier::Clear();
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.FunctionCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Identifier name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (tag == 18) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.FunctionCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.FunctionCall)
  return false;
#undef DO_
}

void FunctionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.FunctionCall)
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.FunctionCall)
}

::google::protobuf::uint8* FunctionCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.FunctionCall)
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.FunctionCall)
  return target;
}

int FunctionCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Expr.Identifier name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::Mysqlx::Expr::Identifier::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void FunctionCall::Swap(FunctionCall* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCall_descriptor_;
  metadata.reflection = FunctionCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Operator::kNameFieldNumber;
const int Operator::kParamFieldNumber;
#endif  // !_MSC_VER

Operator::Operator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Operator)
}

void Operator::InitAsDefaultInstance() {
}

Operator::Operator(const Operator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Operator)
}

void Operator::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Operator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operator_descriptor_;
}

const Operator& Operator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Operator* Operator::default_instance_ = NULL;

Operator* Operator::New() const {
  return new Operator;
}

void Operator::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Operator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (tag == 18) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Operator)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Operator)
}

::google::protobuf::uint8* Operator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Operator)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Operator)
  return target;
}

int Operator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Operator::Swap(Operator* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operator_descriptor_;
  metadata.reflection = Operator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !_MSC_VER

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object.ObjectField)
}

void Object_ObjectField::InitAsDefaultInstance() {
  value_ = const_cast< ::Mysqlx::Expr::Expr*>(&::Mysqlx::Expr::Expr::default_instance());
}

Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void Object_ObjectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object_ObjectField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_ObjectField_descriptor_;
}

const Object_ObjectField& Object_ObjectField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Object_ObjectField* Object_ObjectField::default_instance_ = NULL;

Object_ObjectField* Object_ObjectField::New() const {
  return new Object_ObjectField;
}

void Object_ObjectField::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object.ObjectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .Mysqlx.Expr.Expr value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object.ObjectField)
}

::google::protobuf::uint8* Object_ObjectField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object.ObjectField)
  return target;
}

int Object_ObjectField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .Mysqlx.Expr.Expr value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_ObjectField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object_ObjectField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object_ObjectField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Expr::Expr::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object_ObjectField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object_ObjectField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_ObjectField_descriptor_;
  metadata.reflection = Object_ObjectField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Object::kFldFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object)
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  fld_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
      case 1: {
        if (tag == 10) {
         parse_fld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fld;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object)
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (int i = 0; i < this->fld_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fld(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object)
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object)
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (int i = 0; i < this->fld_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fld(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object)
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  total_size += 1 * this->fld_size();
  for (int i = 0; i < this->fld_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fld(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  fld_.MergeFrom(from.fld_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    fld_.Swap(&other->fld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array::kValueFieldNumber;
#endif  // !_MSC_VER

Array::Array()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Array)
}

void Array::InitAsDefaultInstance() {
}

Array::Array(const Array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Array)
}

void Array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Array)
  SharedDtor();
}

void Array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array_descriptor_;
}

const Array& Array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpr_2eproto();
  return *default_instance_;
}

Array* Array::default_instance_ = NULL;

Array* Array::New() const {
  return new Array;
}

void Array::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Expr value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Array)
  // repeated .Mysqlx.Expr.Expr value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Array)
}

::google::protobuf::uint8* Array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Array)
  // repeated .Mysqlx.Expr.Expr value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Array)
  return target;
}

int Array::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Expr.Expr value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array_descriptor_;
  metadata.reflection = Array_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Expr
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
