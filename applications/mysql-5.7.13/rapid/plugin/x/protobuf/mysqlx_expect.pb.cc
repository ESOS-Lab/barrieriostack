// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_expect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Expect {

namespace {

const ::google::protobuf::Descriptor* Open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Open_reflection_ = NULL;
const ::google::protobuf::Descriptor* Open_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Open_Condition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Open_Condition_ConditionOperation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Open_CtxOperation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Close_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_5fexpect_2eproto() {
  protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx_expect.proto");
  GOOGLE_CHECK(file != NULL);
  Open_descriptor_ = file->message_type(0);
  static const int Open_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, cond_),
  };
  Open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Open_descriptor_,
      Open::default_instance_,
      Open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Open));
  Open_Condition_descriptor_ = Open_descriptor_->nested_type(0);
  static const int Open_Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, condition_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, condition_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, op_),
  };
  Open_Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Open_Condition_descriptor_,
      Open_Condition::default_instance_,
      Open_Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Open_Condition));
  Open_Condition_ConditionOperation_descriptor_ = Open_Condition_descriptor_->enum_type(0);
  Open_CtxOperation_descriptor_ = Open_descriptor_->enum_type(0);
  Close_descriptor_ = file->message_type(1);
  static const int Close_offsets_[1] = {
  };
  Close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Close_descriptor_,
      Close::default_instance_,
      Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Close));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_5fexpect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Open_descriptor_, &Open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Open_Condition_descriptor_, &Open_Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Close_descriptor_, &Close::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_5fexpect_2eproto() {
  delete Open::default_instance_;
  delete Open_reflection_;
  delete Open_Condition::default_instance_;
  delete Open_Condition_reflection_;
  delete Close::default_instance_;
  delete Close_reflection_;
}

void protobuf_AddDesc_mysqlx_5fexpect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023mysqlx_expect.proto\022\rMysqlx.Expect\"\200\003\n"
    "\004Open\022B\n\002op\030\001 \001(\0162 .Mysqlx.Expect.Open.C"
    "txOperation:\024EXPECT_CTX_COPY_PREV\022+\n\004con"
    "d\030\002 \003(\0132\035.Mysqlx.Expect.Open.Condition\032\306"
    "\001\n\tCondition\022\025\n\rcondition_key\030\001 \002(\r\022\027\n\017c"
    "ondition_value\030\002 \001(\014\022K\n\002op\030\003 \001(\01620.Mysql"
    "x.Expect.Open.Condition.ConditionOperati"
    "on:\rEXPECT_OP_SET\"<\n\022ConditionOperation\022"
    "\021\n\rEXPECT_OP_SET\020\000\022\023\n\017EXPECT_OP_UNSET\020\001\""
    ">\n\014CtxOperation\022\030\n\024EXPECT_CTX_COPY_PREV\020"
    "\000\022\024\n\020EXPECT_CTX_EMPTY\020\001\"\007\n\005CloseB\036\n\034com."
    "mysql.cj.mysqlx.protobuf", 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expect.proto", &protobuf_RegisterTypes);
  Open::default_instance_ = new Open();
  Open_Condition::default_instance_ = new Open_Condition();
  Close::default_instance_ = new Close();
  Open::default_instance_->InitAsDefaultInstance();
  Open_Condition::default_instance_->InitAsDefaultInstance();
  Close::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fexpect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fexpect_2eproto {
  StaticDescriptorInitializer_mysqlx_5fexpect_2eproto() {
    protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fexpect_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Open_CtxOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Open_CtxOperation_descriptor_;
}
bool Open_CtxOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Open_CtxOperation Open::EXPECT_CTX_COPY_PREV;
const Open_CtxOperation Open::EXPECT_CTX_EMPTY;
const Open_CtxOperation Open::CtxOperation_MIN;
const Open_CtxOperation Open::CtxOperation_MAX;
const int Open::CtxOperation_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Open_Condition_ConditionOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Open_Condition_ConditionOperation_descriptor_;
}
bool Open_Condition_ConditionOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_SET;
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_UNSET;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MIN;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MAX;
const int Open_Condition::ConditionOperation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Open_Condition::kConditionKeyFieldNumber;
const int Open_Condition::kConditionValueFieldNumber;
const int Open_Condition::kOpFieldNumber;
#endif  // !_MSC_VER

Open_Condition::Open_Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open.Condition)
}

void Open_Condition::InitAsDefaultInstance() {
}

Open_Condition::Open_Condition(const Open_Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open.Condition)
}

void Open_Condition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  condition_key_ = 0u;
  condition_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Open_Condition::~Open_Condition() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open.Condition)
  SharedDtor();
}

void Open_Condition::SharedDtor() {
  if (condition_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete condition_value_;
  }
  if (this != default_instance_) {
  }
}

void Open_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Open_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Open_Condition_descriptor_;
}

const Open_Condition& Open_Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  return *default_instance_;
}

Open_Condition* Open_Condition::default_instance_ = NULL;

Open_Condition* Open_Condition::New() const {
  return new Open_Condition;
}

void Open_Condition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Open_Condition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(condition_key_, op_);
    if (has_condition_value()) {
      if (condition_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        condition_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Open_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 condition_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_key_)));
          set_has_condition_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition_value;
        break;
      }

      // optional bytes condition_value = 2;
      case 2: {
        if (tag == 18) {
         parse_condition_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
      case 3: {
        if (tag == 24) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_Condition_ConditionOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_Condition_ConditionOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open.Condition)
  return false;
#undef DO_
}

void Open_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open.Condition)
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition_key(), output);
  }

  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->condition_value(), output);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open.Condition)
}

::google::protobuf::uint8* Open_Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open.Condition)
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition_key(), target);
  }

  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->condition_value(), target);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open.Condition)
  return target;
}

int Open_Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 condition_key = 1;
    if (has_condition_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition_key());
    }

    // optional bytes condition_value = 2;
    if (has_condition_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->condition_value());
    }

    // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Open_Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Open_Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Open_Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Open_Condition::MergeFrom(const Open_Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition_key()) {
      set_condition_key(from.condition_key());
    }
    if (from.has_condition_value()) {
      set_condition_value(from.condition_value());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Open_Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open_Condition::CopyFrom(const Open_Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Open_Condition::Swap(Open_Condition* other) {
  if (other != this) {
    std::swap(condition_key_, other->condition_key_);
    std::swap(condition_value_, other->condition_value_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Open_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Open_Condition_descriptor_;
  metadata.reflection = Open_Condition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Open::kOpFieldNumber;
const int Open::kCondFieldNumber;
#endif  // !_MSC_VER

Open::Open()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open)
}

void Open::InitAsDefaultInstance() {
}

Open::Open(const Open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open)
}

void Open::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open)
  SharedDtor();
}

void Open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Open_descriptor_;
}

const Open& Open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  return *default_instance_;
}

Open* Open::default_instance_ = NULL;

Open* Open::New() const {
  return new Open;
}

void Open::Clear() {
  op_ = 0;
  cond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_CtxOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_CtxOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cond;
        break;
      }

      // repeated .Mysqlx.Expect.Open.Condition cond = 2;
      case 2: {
        if (tag == 18) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cond;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open)
  return false;
#undef DO_
}

void Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open)
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cond(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open)
}

::google::protobuf::uint8* Open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open)
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cond(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open)
  return target;
}

int Open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  total_size += 1 * this->cond_size();
  for (int i = 0; i < this->cond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Open::MergeFrom(const Open& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_.MergeFrom(from.cond_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open::CopyFrom(const Open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cond())) return false;
  return true;
}

void Open::Swap(Open* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    cond_.Swap(&other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Open_descriptor_;
  metadata.reflection = Open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Close::Close()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Close)
}

void Close::InitAsDefaultInstance() {
}

Close::Close(const Close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Close)
  SharedDtor();
}

void Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Close_descriptor_;
}

const Close& Close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fexpect_2eproto();
  return *default_instance_;
}

Close* Close::default_instance_ = NULL;

Close* Close::New() const {
  return new Close;
}

void Close::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Close)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Close)
}

::google::protobuf::uint8* Close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Close)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Close)
  return target;
}

int Close::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Close*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {

  return true;
}

void Close::Swap(Close* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Close_descriptor_;
  metadata.reflection = Close_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Expect
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
