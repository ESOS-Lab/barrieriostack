// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#ifndef PROTOBUF_mysqlx_5fsql_2eproto__INCLUDED
#define PROTOBUF_mysqlx_5fsql_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Sql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysqlx_5fsql_2eproto();
void protobuf_AssignDesc_mysqlx_5fsql_2eproto();
void protobuf_ShutdownFile_mysqlx_5fsql_2eproto();

class StmtExecute;
class StmtExecuteOk;

// ===================================================================

class StmtExecute : public ::google::protobuf::Message {
 public:
  StmtExecute();
  virtual ~StmtExecute();

  StmtExecute(const StmtExecute& from);

  inline StmtExecute& operator=(const StmtExecute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StmtExecute& default_instance();

  void Swap(StmtExecute* other);

  // implements Message ----------------------------------------------

  StmtExecute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StmtExecute& from);
  void MergeFrom(const StmtExecute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string namespace = 3 [default = "sql"];
  inline bool has_namespace_() const;
  inline void clear_namespace_();
  static const int kNamespaceFieldNumber = 3;
  inline const ::std::string& namespace_() const;
  inline void set_namespace_(const ::std::string& value);
  inline void set_namespace_(const char* value);
  inline void set_namespace_(const char* value, size_t size);
  inline ::std::string* mutable_namespace_();
  inline ::std::string* release_namespace_();
  inline void set_allocated_namespace_(::std::string* namespace_);

  // required bytes stmt = 1;
  inline bool has_stmt() const;
  inline void clear_stmt();
  static const int kStmtFieldNumber = 1;
  inline const ::std::string& stmt() const;
  inline void set_stmt(const ::std::string& value);
  inline void set_stmt(const char* value);
  inline void set_stmt(const void* value, size_t size);
  inline ::std::string* mutable_stmt();
  inline ::std::string* release_stmt();
  inline void set_allocated_stmt(::std::string* stmt);

  // repeated .Mysqlx.Datatypes.Any args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::Mysqlx::Datatypes::Any& args(int index) const;
  inline ::Mysqlx::Datatypes::Any* mutable_args(int index);
  inline ::Mysqlx::Datatypes::Any* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
      mutable_args();

  // optional bool compact_metadata = 4 [default = false];
  inline bool has_compact_metadata() const;
  inline void clear_compact_metadata();
  static const int kCompactMetadataFieldNumber = 4;
  inline bool compact_metadata() const;
  inline void set_compact_metadata(bool value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecute)
 private:
  inline void set_has_namespace_();
  inline void clear_has_namespace_();
  inline void set_has_stmt();
  inline void clear_has_stmt();
  inline void set_has_compact_metadata();
  inline void clear_has_compact_metadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_namespace__;
  ::std::string* namespace__;
  ::std::string* stmt_;
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any > args_;
  bool compact_metadata_;
  friend void  protobuf_AddDesc_mysqlx_5fsql_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fsql_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fsql_2eproto();

  void InitAsDefaultInstance();
  static StmtExecute* default_instance_;
};
// -------------------------------------------------------------------

class StmtExecuteOk : public ::google::protobuf::Message {
 public:
  StmtExecuteOk();
  virtual ~StmtExecuteOk();

  StmtExecuteOk(const StmtExecuteOk& from);

  inline StmtExecuteOk& operator=(const StmtExecuteOk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StmtExecuteOk& default_instance();

  void Swap(StmtExecuteOk* other);

  // implements Message ----------------------------------------------

  StmtExecuteOk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StmtExecuteOk& from);
  void MergeFrom(const StmtExecuteOk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecuteOk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mysqlx_5fsql_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fsql_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fsql_2eproto();

  void InitAsDefaultInstance();
  static StmtExecuteOk* default_instance_;
};
// ===================================================================


// ===================================================================

// StmtExecute

// optional string namespace = 3 [default = "sql"];
inline bool StmtExecute::has_namespace_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StmtExecute::set_has_namespace_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StmtExecute::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StmtExecute::clear_namespace_() {
  if (namespace__ != _default_namespace__) {
    namespace__->assign(*_default_namespace__);
  }
  clear_has_namespace_();
}
inline const ::std::string& StmtExecute::namespace_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.namespace)
  return *namespace__;
}
inline void StmtExecute::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  if (namespace__ == _default_namespace__) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.namespace)
}
inline void StmtExecute::set_namespace_(const char* value) {
  set_has_namespace_();
  if (namespace__ == _default_namespace__) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.namespace)
}
inline void StmtExecute::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  if (namespace__ == _default_namespace__) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.namespace)
}
inline ::std::string* StmtExecute::mutable_namespace_() {
  set_has_namespace_();
  if (namespace__ == _default_namespace__) {
    namespace__ = new ::std::string(*_default_namespace__);
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.namespace)
  return namespace__;
}
inline ::std::string* StmtExecute::release_namespace_() {
  clear_has_namespace_();
  if (namespace__ == _default_namespace__) {
    return NULL;
  } else {
    ::std::string* temp = namespace__;
    namespace__ = const_cast< ::std::string*>(_default_namespace__);
    return temp;
  }
}
inline void StmtExecute::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace__ != _default_namespace__) {
    delete namespace__;
  }
  if (namespace_) {
    set_has_namespace_();
    namespace__ = namespace_;
  } else {
    clear_has_namespace_();
    namespace__ = const_cast< ::std::string*>(_default_namespace__);
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.namespace)
}

// required bytes stmt = 1;
inline bool StmtExecute::has_stmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StmtExecute::set_has_stmt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StmtExecute::clear_has_stmt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StmtExecute::clear_stmt() {
  if (stmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stmt_->clear();
  }
  clear_has_stmt();
}
inline const ::std::string& StmtExecute::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.stmt)
  return *stmt_;
}
inline void StmtExecute::set_stmt(const ::std::string& value) {
  set_has_stmt();
  if (stmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stmt_ = new ::std::string;
  }
  stmt_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.stmt)
}
inline void StmtExecute::set_stmt(const char* value) {
  set_has_stmt();
  if (stmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stmt_ = new ::std::string;
  }
  stmt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.stmt)
}
inline void StmtExecute::set_stmt(const void* value, size_t size) {
  set_has_stmt();
  if (stmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stmt_ = new ::std::string;
  }
  stmt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.stmt)
}
inline ::std::string* StmtExecute::mutable_stmt() {
  set_has_stmt();
  if (stmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stmt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.stmt)
  return stmt_;
}
inline ::std::string* StmtExecute::release_stmt() {
  clear_has_stmt();
  if (stmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stmt_;
    stmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StmtExecute::set_allocated_stmt(::std::string* stmt) {
  if (stmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stmt_;
  }
  if (stmt) {
    set_has_stmt();
    stmt_ = stmt;
  } else {
    clear_has_stmt();
    stmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.stmt)
}

// repeated .Mysqlx.Datatypes.Any args = 2;
inline int StmtExecute::args_size() const {
  return args_.size();
}
inline void StmtExecute::clear_args() {
  args_.Clear();
}
inline const ::Mysqlx::Datatypes::Any& StmtExecute::args(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.args)
  return args_.Get(index);
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.args)
  return args_.Mutable(index);
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::add_args() {
  // @@protoc_insertion_point(field_add:Mysqlx.Sql.StmtExecute.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
StmtExecute::args() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Sql.StmtExecute.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
StmtExecute::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Sql.StmtExecute.args)
  return &args_;
}

// optional bool compact_metadata = 4 [default = false];
inline bool StmtExecute::has_compact_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StmtExecute::set_has_compact_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StmtExecute::clear_has_compact_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StmtExecute::clear_compact_metadata() {
  compact_metadata_ = false;
  clear_has_compact_metadata();
}
inline bool StmtExecute::compact_metadata() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.compact_metadata)
  return compact_metadata_;
}
inline void StmtExecute::set_compact_metadata(bool value) {
  set_has_compact_metadata();
  compact_metadata_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.compact_metadata)
}

// -------------------------------------------------------------------

// StmtExecuteOk


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sql
}  // namespace Mysqlx

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysqlx_5fsql_2eproto__INCLUDED
