// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_notice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Notice {

namespace {

const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Frame_Scope_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Warning_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Warning_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SessionVariableChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionVariableChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionStateChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionStateChanged_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionStateChanged_Parameter_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_5fnotice_2eproto() {
  protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx_notice.proto");
  GOOGLE_CHECK(file != NULL);
  Frame_descriptor_ = file->message_type(0);
  static const int Frame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, payload_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  Frame_Scope_descriptor_ = Frame_descriptor_->enum_type(0);
  Warning_descriptor_ = file->message_type(1);
  static const int Warning_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, msg_),
  };
  Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Warning_descriptor_,
      Warning::default_instance_,
      Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Warning));
  Warning_Level_descriptor_ = Warning_descriptor_->enum_type(0);
  SessionVariableChanged_descriptor_ = file->message_type(2);
  static const int SessionVariableChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, value_),
  };
  SessionVariableChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionVariableChanged_descriptor_,
      SessionVariableChanged::default_instance_,
      SessionVariableChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionVariableChanged));
  SessionStateChanged_descriptor_ = file->message_type(3);
  static const int SessionStateChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, value_),
  };
  SessionStateChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionStateChanged_descriptor_,
      SessionStateChanged::default_instance_,
      SessionStateChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionStateChanged));
  SessionStateChanged_Parameter_descriptor_ = SessionStateChanged_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_5fnotice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Warning_descriptor_, &Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionVariableChanged_descriptor_, &SessionVariableChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionStateChanged_descriptor_, &SessionStateChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_5fnotice_2eproto() {
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete Warning::default_instance_;
  delete Warning_reflection_;
  delete SessionVariableChanged::default_instance_;
  delete SessionVariableChanged_reflection_;
  delete SessionStateChanged::default_instance_;
  delete SessionStateChanged_reflection_;
}

void protobuf_AddDesc_mysqlx_5fnotice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Datatypes::protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023mysqlx_notice.proto\022\rMysqlx.Notice\032\026my"
    "sqlx_datatypes.proto\"y\n\005Frame\022\014\n\004type\030\001 "
    "\002(\r\0221\n\005scope\030\002 \001(\0162\032.Mysqlx.Notice.Frame"
    ".Scope:\006GLOBAL\022\017\n\007payload\030\003 \001(\014\"\036\n\005Scope"
    "\022\n\n\006GLOBAL\020\001\022\t\n\005LOCAL\020\002\"\205\001\n\007Warning\0224\n\005l"
    "evel\030\001 \001(\0162\034.Mysqlx.Notice.Warning.Level"
    ":\007WARNING\022\014\n\004code\030\002 \002(\r\022\013\n\003msg\030\003 \002(\t\")\n\005"
    "Level\022\010\n\004NOTE\020\001\022\013\n\007WARNING\020\002\022\t\n\005ERROR\020\003\""
    "P\n\026SessionVariableChanged\022\r\n\005param\030\001 \002(\t"
    "\022\'\n\005value\030\002 \001(\0132\030.Mysqlx.Datatypes.Scala"
    "r\"\325\002\n\023SessionStateChanged\022;\n\005param\030\001 \002(\016"
    "2,.Mysqlx.Notice.SessionStateChanged.Par"
    "ameter\022\'\n\005value\030\002 \001(\0132\030.Mysqlx.Datatypes"
    ".Scalar\"\327\001\n\tParameter\022\022\n\016CURRENT_SCHEMA\020"
    "\001\022\023\n\017ACCOUNT_EXPIRED\020\002\022\027\n\023GENERATED_INSE"
    "RT_ID\020\003\022\021\n\rROWS_AFFECTED\020\004\022\016\n\nROWS_FOUND"
    "\020\005\022\020\n\014ROWS_MATCHED\020\006\022\021\n\rTRX_COMMITTED\020\007\022"
    "\022\n\016TRX_ROLLEDBACK\020\t\022\024\n\020PRODUCED_MESSAGE\020"
    "\n\022\026\n\022CLIENT_ID_ASSIGNED\020\013B\036\n\034com.mysql.c"
    "j.mysqlx.protobuf", 777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_notice.proto", &protobuf_RegisterTypes);
  Frame::default_instance_ = new Frame();
  Warning::default_instance_ = new Warning();
  SessionVariableChanged::default_instance_ = new SessionVariableChanged();
  SessionStateChanged::default_instance_ = new SessionStateChanged();
  Frame::default_instance_->InitAsDefaultInstance();
  Warning::default_instance_->InitAsDefaultInstance();
  SessionVariableChanged::default_instance_->InitAsDefaultInstance();
  SessionStateChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fnotice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fnotice_2eproto {
  StaticDescriptorInitializer_mysqlx_5fnotice_2eproto() {
    protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fnotice_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Frame_Scope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_Scope_descriptor_;
}
bool Frame_Scope_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Frame_Scope Frame::GLOBAL;
const Frame_Scope Frame::LOCAL;
const Frame_Scope Frame::Scope_MIN;
const Frame_Scope Frame::Scope_MAX;
const int Frame::Scope_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Frame::kTypeFieldNumber;
const int Frame::kScopeFieldNumber;
const int Frame::kPayloadFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Frame)
}

void Frame::InitAsDefaultInstance() {
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Frame)
}

void Frame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  scope_ = 1;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0u;
    scope_ = 1;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scope;
        break;
      }

      // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
      case 2: {
        if (tag == 16) {
         parse_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Frame_Scope_IsValid(value)) {
            set_scope(static_cast< ::Mysqlx::Notice::Frame_Scope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (tag == 26) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Frame)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scope(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Frame)
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Frame)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scope(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Frame)
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scope_, other->scope_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Warning_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Warning_Level_descriptor_;
}
bool Warning_Level_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Warning_Level Warning::NOTE;
const Warning_Level Warning::WARNING;
const Warning_Level Warning::ERROR;
const Warning_Level Warning::Level_MIN;
const Warning_Level Warning::Level_MAX;
const int Warning::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Warning::kLevelFieldNumber;
const int Warning::kCodeFieldNumber;
const int Warning::kMsgFieldNumber;
#endif  // !_MSC_VER

Warning::Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Warning)
}

void Warning::InitAsDefaultInstance() {
}

Warning::Warning(const Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Warning)
}

void Warning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 2;
  code_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Warning)
  SharedDtor();
}

void Warning::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Warning_descriptor_;
}

const Warning& Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  return *default_instance_;
}

Warning* Warning::default_instance_ = NULL;

Warning* Warning::New() const {
  return new Warning;
}

void Warning::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    level_ = 2;
    code_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Warning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Warning_Level_IsValid(value)) {
            set_level(static_cast< ::Mysqlx::Notice::Warning_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Warning)
  return false;
#undef DO_
}

void Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Warning)
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // required uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Warning)
}

::google::protobuf::uint8* Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Warning)
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // required uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Warning)
  return target;
}

int Warning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // required uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Warning::MergeFrom(const Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Warning::CopyFrom(const Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Warning::Swap(Warning* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Warning_descriptor_;
  metadata.reflection = Warning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionVariableChanged::kParamFieldNumber;
const int SessionVariableChanged::kValueFieldNumber;
#endif  // !_MSC_VER

SessionVariableChanged::SessionVariableChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionVariableChanged)
}

void SessionVariableChanged::InitAsDefaultInstance() {
  value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(&::Mysqlx::Datatypes::Scalar::default_instance());
}

SessionVariableChanged::SessionVariableChanged(const SessionVariableChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionVariableChanged)
}

void SessionVariableChanged::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionVariableChanged::~SessionVariableChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionVariableChanged)
  SharedDtor();
}

void SessionVariableChanged::SharedDtor() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void SessionVariableChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionVariableChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionVariableChanged_descriptor_;
}

const SessionVariableChanged& SessionVariableChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  return *default_instance_;
}

SessionVariableChanged* SessionVariableChanged::default_instance_ = NULL;

SessionVariableChanged* SessionVariableChanged::New() const {
  return new SessionVariableChanged;
}

void SessionVariableChanged::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionVariableChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionVariableChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionVariableChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionVariableChanged)
  return false;
#undef DO_
}

void SessionVariableChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionVariableChanged)
  // required string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionVariableChanged)
}

::google::protobuf::uint8* SessionVariableChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionVariableChanged)
  // required string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionVariableChanged)
  return target;
}

int SessionVariableChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // optional .Mysqlx.Datatypes.Scalar value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionVariableChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionVariableChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionVariableChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionVariableChanged::MergeFrom(const SessionVariableChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionVariableChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionVariableChanged::CopyFrom(const SessionVariableChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariableChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void SessionVariableChanged::Swap(SessionVariableChanged* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionVariableChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionVariableChanged_descriptor_;
  metadata.reflection = SessionVariableChanged_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SessionStateChanged_Parameter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStateChanged_Parameter_descriptor_;
}
bool SessionStateChanged_Parameter_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SessionStateChanged_Parameter SessionStateChanged::CURRENT_SCHEMA;
const SessionStateChanged_Parameter SessionStateChanged::ACCOUNT_EXPIRED;
const SessionStateChanged_Parameter SessionStateChanged::GENERATED_INSERT_ID;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_AFFECTED;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_FOUND;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_MATCHED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_COMMITTED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_ROLLEDBACK;
const SessionStateChanged_Parameter SessionStateChanged::PRODUCED_MESSAGE;
const SessionStateChanged_Parameter SessionStateChanged::CLIENT_ID_ASSIGNED;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MIN;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MAX;
const int SessionStateChanged::Parameter_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SessionStateChanged::kParamFieldNumber;
const int SessionStateChanged::kValueFieldNumber;
#endif  // !_MSC_VER

SessionStateChanged::SessionStateChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionStateChanged)
}

void SessionStateChanged::InitAsDefaultInstance() {
  value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(&::Mysqlx::Datatypes::Scalar::default_instance());
}

SessionStateChanged::SessionStateChanged(const SessionStateChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionStateChanged)
}

void SessionStateChanged::SharedCtor() {
  _cached_size_ = 0;
  param_ = 1;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionStateChanged::~SessionStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionStateChanged)
  SharedDtor();
}

void SessionStateChanged::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SessionStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionStateChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStateChanged_descriptor_;
}

const SessionStateChanged& SessionStateChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fnotice_2eproto();
  return *default_instance_;
}

SessionStateChanged* SessionStateChanged::default_instance_ = NULL;

SessionStateChanged* SessionStateChanged::New() const {
  return new SessionStateChanged;
}

void SessionStateChanged::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    param_ = 1;
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value)) {
            set_param(static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionStateChanged)
  return false;
#undef DO_
}

void SessionStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionStateChanged)
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionStateChanged)
}

::google::protobuf::uint8* SessionStateChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionStateChanged)
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionStateChanged)
  return target;
}

int SessionStateChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Mysqlx.Datatypes.Scalar value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionStateChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionStateChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionStateChanged::MergeFrom(const SessionStateChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionStateChanged::CopyFrom(const SessionStateChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void SessionStateChanged::Swap(SessionStateChanged* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionStateChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionStateChanged_descriptor_;
  metadata.reflection = SessionStateChanged_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Notice
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
