// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Connection {

namespace {

const ::google::protobuf::Descriptor* Capability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capability_reflection_ = NULL;
const ::google::protobuf::Descriptor* Capabilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capabilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapabilitiesGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapabilitiesGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapabilitiesSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapabilitiesSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Close_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_5fconnection_2eproto() {
  protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx_connection.proto");
  GOOGLE_CHECK(file != NULL);
  Capability_descriptor_ = file->message_type(0);
  static const int Capability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, value_),
  };
  Capability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Capability_descriptor_,
      Capability::default_instance_,
      Capability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Capability));
  Capabilities_descriptor_ = file->message_type(1);
  static const int Capabilities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, capabilities_),
  };
  Capabilities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Capabilities_descriptor_,
      Capabilities::default_instance_,
      Capabilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Capabilities));
  CapabilitiesGet_descriptor_ = file->message_type(2);
  static const int CapabilitiesGet_offsets_[1] = {
  };
  CapabilitiesGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapabilitiesGet_descriptor_,
      CapabilitiesGet::default_instance_,
      CapabilitiesGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapabilitiesGet));
  CapabilitiesSet_descriptor_ = file->message_type(3);
  static const int CapabilitiesSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, capabilities_),
  };
  CapabilitiesSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapabilitiesSet_descriptor_,
      CapabilitiesSet::default_instance_,
      CapabilitiesSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapabilitiesSet));
  Close_descriptor_ = file->message_type(4);
  static const int Close_offsets_[1] = {
  };
  Close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Close_descriptor_,
      Close::default_instance_,
      Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Close));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_5fconnection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Capability_descriptor_, &Capability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Capabilities_descriptor_, &Capabilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapabilitiesGet_descriptor_, &CapabilitiesGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapabilitiesSet_descriptor_, &CapabilitiesSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Close_descriptor_, &Close::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_5fconnection_2eproto() {
  delete Capability::default_instance_;
  delete Capability_reflection_;
  delete Capabilities::default_instance_;
  delete Capabilities_reflection_;
  delete CapabilitiesGet::default_instance_;
  delete CapabilitiesGet_reflection_;
  delete CapabilitiesSet::default_instance_;
  delete CapabilitiesSet_reflection_;
  delete Close::default_instance_;
  delete Close_reflection_;
}

void protobuf_AddDesc_mysqlx_5fconnection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Datatypes::protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027mysqlx_connection.proto\022\021Mysqlx.Connec"
    "tion\032\026mysqlx_datatypes.proto\"@\n\nCapabili"
    "ty\022\014\n\004name\030\001 \002(\t\022$\n\005value\030\002 \002(\0132\025.Mysqlx"
    ".Datatypes.Any\"C\n\014Capabilities\0223\n\014capabi"
    "lities\030\001 \003(\0132\035.Mysqlx.Connection.Capabil"
    "ity\"\021\n\017CapabilitiesGet\"H\n\017CapabilitiesSe"
    "t\0225\n\014capabilities\030\001 \002(\0132\037.Mysqlx.Connect"
    "ion.Capabilities\"\007\n\005CloseB\036\n\034com.mysql.c"
    "j.mysqlx.protobuf", 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_connection.proto", &protobuf_RegisterTypes);
  Capability::default_instance_ = new Capability();
  Capabilities::default_instance_ = new Capabilities();
  CapabilitiesGet::default_instance_ = new CapabilitiesGet();
  CapabilitiesSet::default_instance_ = new CapabilitiesSet();
  Close::default_instance_ = new Close();
  Capability::default_instance_->InitAsDefaultInstance();
  Capabilities::default_instance_->InitAsDefaultInstance();
  CapabilitiesGet::default_instance_->InitAsDefaultInstance();
  CapabilitiesSet::default_instance_->InitAsDefaultInstance();
  Close::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fconnection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fconnection_2eproto {
  StaticDescriptorInitializer_mysqlx_5fconnection_2eproto() {
    protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fconnection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Capability::kNameFieldNumber;
const int Capability::kValueFieldNumber;
#endif  // !_MSC_VER

Capability::Capability()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capability)
}

void Capability::InitAsDefaultInstance() {
  value_ = const_cast< ::Mysqlx::Datatypes::Any*>(&::Mysqlx::Datatypes::Any::default_instance());
}

Capability::Capability(const Capability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capability)
}

void Capability::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_descriptor_;
}

const Capability& Capability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  return *default_instance_;
}

Capability* Capability::default_instance_ = NULL;

Capability* Capability::New() const {
  return new Capability;
}

void Capability::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Capability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Capability)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Capability)
}

::google::protobuf::uint8* Capability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capability)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capability)
  return target;
}

int Capability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Mysqlx.Datatypes.Any value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Capability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Capability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Capability::Swap(Capability* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capability_descriptor_;
  metadata.reflection = Capability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Capabilities::kCapabilitiesFieldNumber;
#endif  // !_MSC_VER

Capabilities::Capabilities()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capabilities)
}

void Capabilities::InitAsDefaultInstance() {
}

Capabilities::Capabilities(const Capabilities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capabilities)
}

void Capabilities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capabilities)
  SharedDtor();
}

void Capabilities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Capabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capabilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capabilities_descriptor_;
}

const Capabilities& Capabilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  return *default_instance_;
}

Capabilities* Capabilities::default_instance_ = NULL;

Capabilities* Capabilities::New() const {
  return new Capabilities;
}

void Capabilities::Clear() {
  capabilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Capabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Capabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Connection.Capability capabilities = 1;
      case 1: {
        if (tag == 10) {
         parse_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_capabilities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Capabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Capabilities)
  return false;
#undef DO_
}

void Capabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Capabilities)
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  for (int i = 0; i < this->capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->capabilities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Capabilities)
}

::google::protobuf::uint8* Capabilities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capabilities)
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  for (int i = 0; i < this->capabilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->capabilities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capabilities)
  return target;
}

int Capabilities::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  total_size += 1 * this->capabilities_size();
  for (int i = 0; i < this->capabilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capabilities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capabilities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Capabilities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Capabilities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Capabilities::MergeFrom(const Capabilities& from) {
  GOOGLE_CHECK_NE(&from, this);
  capabilities_.MergeFrom(from.capabilities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Capabilities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capabilities::CopyFrom(const Capabilities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->capabilities())) return false;
  return true;
}

void Capabilities::Swap(Capabilities* other) {
  if (other != this) {
    capabilities_.Swap(&other->capabilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Capabilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capabilities_descriptor_;
  metadata.reflection = Capabilities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CapabilitiesGet::CapabilitiesGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesGet)
}

void CapabilitiesGet::InitAsDefaultInstance() {
}

CapabilitiesGet::CapabilitiesGet(const CapabilitiesGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesGet)
}

void CapabilitiesGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapabilitiesGet::~CapabilitiesGet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesGet)
  SharedDtor();
}

void CapabilitiesGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CapabilitiesGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilitiesGet_descriptor_;
}

const CapabilitiesGet& CapabilitiesGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  return *default_instance_;
}

CapabilitiesGet* CapabilitiesGet::default_instance_ = NULL;

CapabilitiesGet* CapabilitiesGet::New() const {
  return new CapabilitiesGet;
}

void CapabilitiesGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CapabilitiesGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.CapabilitiesGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.CapabilitiesGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.CapabilitiesGet)
  return false;
#undef DO_
}

void CapabilitiesGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.CapabilitiesGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.CapabilitiesGet)
}

::google::protobuf::uint8* CapabilitiesGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesGet)
  return target;
}

int CapabilitiesGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapabilitiesGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapabilitiesGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CapabilitiesGet::MergeFrom(const CapabilitiesGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CapabilitiesGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesGet::CopyFrom(const CapabilitiesGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesGet::IsInitialized() const {

  return true;
}

void CapabilitiesGet::Swap(CapabilitiesGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CapabilitiesGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilitiesGet_descriptor_;
  metadata.reflection = CapabilitiesGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CapabilitiesSet::kCapabilitiesFieldNumber;
#endif  // !_MSC_VER

CapabilitiesSet::CapabilitiesSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesSet)
}

void CapabilitiesSet::InitAsDefaultInstance() {
  capabilities_ = const_cast< ::Mysqlx::Connection::Capabilities*>(&::Mysqlx::Connection::Capabilities::default_instance());
}

CapabilitiesSet::CapabilitiesSet(const CapabilitiesSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesSet)
}

void CapabilitiesSet::SharedCtor() {
  _cached_size_ = 0;
  capabilities_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapabilitiesSet::~CapabilitiesSet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesSet)
  SharedDtor();
}

void CapabilitiesSet::SharedDtor() {
  if (this != default_instance_) {
    delete capabilities_;
  }
}

void CapabilitiesSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilitiesSet_descriptor_;
}

const CapabilitiesSet& CapabilitiesSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  return *default_instance_;
}

CapabilitiesSet* CapabilitiesSet::default_instance_ = NULL;

CapabilitiesSet* CapabilitiesSet::New() const {
  return new CapabilitiesSet;
}

void CapabilitiesSet::Clear() {
  if (has_capabilities()) {
    if (capabilities_ != NULL) capabilities_->::Mysqlx::Connection::Capabilities::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CapabilitiesSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.CapabilitiesSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Connection.Capabilities capabilities = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.CapabilitiesSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.CapabilitiesSet)
  return false;
#undef DO_
}

void CapabilitiesSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.CapabilitiesSet)
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->capabilities(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.CapabilitiesSet)
}

::google::protobuf::uint8* CapabilitiesSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesSet)
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (has_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->capabilities(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesSet)
  return target;
}

int CapabilitiesSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Connection.Capabilities capabilities = 1;
    if (has_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capabilities());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapabilitiesSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapabilitiesSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CapabilitiesSet::MergeFrom(const CapabilitiesSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capabilities()) {
      mutable_capabilities()->::Mysqlx::Connection::Capabilities::MergeFrom(from.capabilities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CapabilitiesSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesSet::CopyFrom(const CapabilitiesSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_capabilities()) {
    if (!this->capabilities().IsInitialized()) return false;
  }
  return true;
}

void CapabilitiesSet::Swap(CapabilitiesSet* other) {
  if (other != this) {
    std::swap(capabilities_, other->capabilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CapabilitiesSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilitiesSet_descriptor_;
  metadata.reflection = CapabilitiesSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Close::Close()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Close)
}

void Close::InitAsDefaultInstance() {
}

Close::Close(const Close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Close)
  SharedDtor();
}

void Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Close_descriptor_;
}

const Close& Close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fconnection_2eproto();
  return *default_instance_;
}

Close* Close::default_instance_ = NULL;

Close* Close::New() const {
  return new Close;
}

void Close::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Close)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Close)
}

::google::protobuf::uint8* Close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Close)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Close)
  return target;
}

int Close::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Close*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {

  return true;
}

void Close::Swap(Close* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Close_descriptor_;
  metadata.reflection = Close_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Connection
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
