// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#ifndef PROTOBUF_mysqlx_5fresultset_2eproto__INCLUDED
#define PROTOBUF_mysqlx_5fresultset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Resultset {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

class FetchDoneMoreOutParams;
class FetchDoneMoreResultsets;
class FetchDone;
class ColumnMetaData;
class Row;

enum ColumnMetaData_FieldType {
  ColumnMetaData_FieldType_SINT = 1,
  ColumnMetaData_FieldType_UINT = 2,
  ColumnMetaData_FieldType_DOUBLE = 5,
  ColumnMetaData_FieldType_FLOAT = 6,
  ColumnMetaData_FieldType_BYTES = 7,
  ColumnMetaData_FieldType_TIME = 10,
  ColumnMetaData_FieldType_DATETIME = 12,
  ColumnMetaData_FieldType_SET = 15,
  ColumnMetaData_FieldType_ENUM = 16,
  ColumnMetaData_FieldType_BIT = 17,
  ColumnMetaData_FieldType_DECIMAL = 18
};
bool ColumnMetaData_FieldType_IsValid(int value);
const ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MIN = ColumnMetaData_FieldType_SINT;
const ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MAX = ColumnMetaData_FieldType_DECIMAL;
const int ColumnMetaData_FieldType_FieldType_ARRAYSIZE = ColumnMetaData_FieldType_FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnMetaData_FieldType_descriptor();
inline const ::std::string& ColumnMetaData_FieldType_Name(ColumnMetaData_FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnMetaData_FieldType_descriptor(), value);
}
inline bool ColumnMetaData_FieldType_Parse(
    const ::std::string& name, ColumnMetaData_FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnMetaData_FieldType>(
    ColumnMetaData_FieldType_descriptor(), name, value);
}
// ===================================================================

class FetchDoneMoreOutParams : public ::google::protobuf::Message {
 public:
  FetchDoneMoreOutParams();
  virtual ~FetchDoneMoreOutParams();

  FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from);

  inline FetchDoneMoreOutParams& operator=(const FetchDoneMoreOutParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchDoneMoreOutParams& default_instance();

  void Swap(FetchDoneMoreOutParams* other);

  // implements Message ----------------------------------------------

  FetchDoneMoreOutParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchDoneMoreOutParams& from);
  void MergeFrom(const FetchDoneMoreOutParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDoneMoreOutParams)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

  void InitAsDefaultInstance();
  static FetchDoneMoreOutParams* default_instance_;
};
// -------------------------------------------------------------------

class FetchDoneMoreResultsets : public ::google::protobuf::Message {
 public:
  FetchDoneMoreResultsets();
  virtual ~FetchDoneMoreResultsets();

  FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from);

  inline FetchDoneMoreResultsets& operator=(const FetchDoneMoreResultsets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchDoneMoreResultsets& default_instance();

  void Swap(FetchDoneMoreResultsets* other);

  // implements Message ----------------------------------------------

  FetchDoneMoreResultsets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchDoneMoreResultsets& from);
  void MergeFrom(const FetchDoneMoreResultsets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDoneMoreResultsets)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

  void InitAsDefaultInstance();
  static FetchDoneMoreResultsets* default_instance_;
};
// -------------------------------------------------------------------

class FetchDone : public ::google::protobuf::Message {
 public:
  FetchDone();
  virtual ~FetchDone();

  FetchDone(const FetchDone& from);

  inline FetchDone& operator=(const FetchDone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchDone& default_instance();

  void Swap(FetchDone* other);

  // implements Message ----------------------------------------------

  FetchDone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchDone& from);
  void MergeFrom(const FetchDone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDone)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

  void InitAsDefaultInstance();
  static FetchDone* default_instance_;
};
// -------------------------------------------------------------------

class ColumnMetaData : public ::google::protobuf::Message {
 public:
  ColumnMetaData();
  virtual ~ColumnMetaData();

  ColumnMetaData(const ColumnMetaData& from);

  inline ColumnMetaData& operator=(const ColumnMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnMetaData& default_instance();

  void Swap(ColumnMetaData* other);

  // implements Message ----------------------------------------------

  ColumnMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnMetaData& from);
  void MergeFrom(const ColumnMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ColumnMetaData_FieldType FieldType;
  static const FieldType SINT = ColumnMetaData_FieldType_SINT;
  static const FieldType UINT = ColumnMetaData_FieldType_UINT;
  static const FieldType DOUBLE = ColumnMetaData_FieldType_DOUBLE;
  static const FieldType FLOAT = ColumnMetaData_FieldType_FLOAT;
  static const FieldType BYTES = ColumnMetaData_FieldType_BYTES;
  static const FieldType TIME = ColumnMetaData_FieldType_TIME;
  static const FieldType DATETIME = ColumnMetaData_FieldType_DATETIME;
  static const FieldType SET = ColumnMetaData_FieldType_SET;
  static const FieldType ENUM = ColumnMetaData_FieldType_ENUM;
  static const FieldType BIT = ColumnMetaData_FieldType_BIT;
  static const FieldType DECIMAL = ColumnMetaData_FieldType_DECIMAL;
  static inline bool FieldType_IsValid(int value) {
    return ColumnMetaData_FieldType_IsValid(value);
  }
  static const FieldType FieldType_MIN =
    ColumnMetaData_FieldType_FieldType_MIN;
  static const FieldType FieldType_MAX =
    ColumnMetaData_FieldType_FieldType_MAX;
  static const int FieldType_ARRAYSIZE =
    ColumnMetaData_FieldType_FieldType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FieldType_descriptor() {
    return ColumnMetaData_FieldType_descriptor();
  }
  static inline const ::std::string& FieldType_Name(FieldType value) {
    return ColumnMetaData_FieldType_Name(value);
  }
  static inline bool FieldType_Parse(const ::std::string& name,
      FieldType* value) {
    return ColumnMetaData_FieldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Mysqlx::Resultset::ColumnMetaData_FieldType type() const;
  inline void set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes original_name = 3;
  inline bool has_original_name() const;
  inline void clear_original_name();
  static const int kOriginalNameFieldNumber = 3;
  inline const ::std::string& original_name() const;
  inline void set_original_name(const ::std::string& value);
  inline void set_original_name(const char* value);
  inline void set_original_name(const void* value, size_t size);
  inline ::std::string* mutable_original_name();
  inline ::std::string* release_original_name();
  inline void set_allocated_original_name(::std::string* original_name);

  // optional bytes table = 4;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 4;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // optional bytes original_table = 5;
  inline bool has_original_table() const;
  inline void clear_original_table();
  static const int kOriginalTableFieldNumber = 5;
  inline const ::std::string& original_table() const;
  inline void set_original_table(const ::std::string& value);
  inline void set_original_table(const char* value);
  inline void set_original_table(const void* value, size_t size);
  inline ::std::string* mutable_original_table();
  inline ::std::string* release_original_table();
  inline void set_allocated_original_table(::std::string* original_table);

  // optional bytes schema = 6;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 6;
  inline const ::std::string& schema() const;
  inline void set_schema(const ::std::string& value);
  inline void set_schema(const char* value);
  inline void set_schema(const void* value, size_t size);
  inline ::std::string* mutable_schema();
  inline ::std::string* release_schema();
  inline void set_allocated_schema(::std::string* schema);

  // optional bytes catalog = 7;
  inline bool has_catalog() const;
  inline void clear_catalog();
  static const int kCatalogFieldNumber = 7;
  inline const ::std::string& catalog() const;
  inline void set_catalog(const ::std::string& value);
  inline void set_catalog(const char* value);
  inline void set_catalog(const void* value, size_t size);
  inline ::std::string* mutable_catalog();
  inline ::std::string* release_catalog();
  inline void set_allocated_catalog(::std::string* catalog);

  // optional uint64 collation = 8;
  inline bool has_collation() const;
  inline void clear_collation();
  static const int kCollationFieldNumber = 8;
  inline ::google::protobuf::uint64 collation() const;
  inline void set_collation(::google::protobuf::uint64 value);

  // optional uint32 fractional_digits = 9;
  inline bool has_fractional_digits() const;
  inline void clear_fractional_digits();
  static const int kFractionalDigitsFieldNumber = 9;
  inline ::google::protobuf::uint32 fractional_digits() const;
  inline void set_fractional_digits(::google::protobuf::uint32 value);

  // optional uint32 length = 10;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 10;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // optional uint32 flags = 11;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 11;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 content_type = 12;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 content_type() const;
  inline void set_content_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.ColumnMetaData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_original_name();
  inline void clear_has_original_name();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_original_table();
  inline void clear_has_original_table();
  inline void set_has_schema();
  inline void clear_has_schema();
  inline void set_has_catalog();
  inline void clear_has_catalog();
  inline void set_has_collation();
  inline void clear_has_collation();
  inline void set_has_fractional_digits();
  inline void clear_has_fractional_digits();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_content_type();
  inline void clear_has_content_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* original_name_;
  ::std::string* table_;
  ::std::string* original_table_;
  int type_;
  ::google::protobuf::uint32 fractional_digits_;
  ::std::string* schema_;
  ::std::string* catalog_;
  ::google::protobuf::uint64 collation_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 content_type_;
  friend void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

  void InitAsDefaultInstance();
  static ColumnMetaData* default_instance_;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  void Swap(Row* other);

  // implements Message ----------------------------------------------

  Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::std::string& field(int index) const;
  inline ::std::string* mutable_field(int index);
  inline void set_field(int index, const ::std::string& value);
  inline void set_field(int index, const char* value);
  inline void set_field(int index, const void* value, size_t size);
  inline ::std::string* add_field();
  inline void add_field(const ::std::string& value);
  inline void add_field(const char* value);
  inline void add_field(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& field() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field();

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.Row)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field_;
  friend void  protobuf_AddDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_AssignDesc_mysqlx_5fresultset_2eproto();
  friend void protobuf_ShutdownFile_mysqlx_5fresultset_2eproto();

  void InitAsDefaultInstance();
  static Row* default_instance_;
};
// ===================================================================


// ===================================================================

// FetchDoneMoreOutParams

// -------------------------------------------------------------------

// FetchDoneMoreResultsets

// -------------------------------------------------------------------

// FetchDone

// -------------------------------------------------------------------

// ColumnMetaData

// required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
inline bool ColumnMetaData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnMetaData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnMetaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnMetaData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Mysqlx::Resultset::ColumnMetaData_FieldType ColumnMetaData::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.type)
  return static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(type_);
}
inline void ColumnMetaData::set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value) {
  assert(::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.type)
}

// optional bytes name = 2;
inline bool ColumnMetaData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnMetaData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnMetaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnMetaData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ColumnMetaData::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.name)
  return *name_;
}
inline void ColumnMetaData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.name)
}
inline void ColumnMetaData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.name)
}
inline void ColumnMetaData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.name)
}
inline ::std::string* ColumnMetaData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.name)
  return name_;
}
inline ::std::string* ColumnMetaData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.name)
}

// optional bytes original_name = 3;
inline bool ColumnMetaData::has_original_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnMetaData::set_has_original_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnMetaData::clear_has_original_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnMetaData::clear_original_name() {
  if (original_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_name_->clear();
  }
  clear_has_original_name();
}
inline const ::std::string& ColumnMetaData::original_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_name)
  return *original_name_;
}
inline void ColumnMetaData::set_original_name(const ::std::string& value) {
  set_has_original_name();
  if (original_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_name_ = new ::std::string;
  }
  original_name_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline void ColumnMetaData::set_original_name(const char* value) {
  set_has_original_name();
  if (original_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_name_ = new ::std::string;
  }
  original_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline void ColumnMetaData::set_original_name(const void* value, size_t size) {
  set_has_original_name();
  if (original_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_name_ = new ::std::string;
  }
  original_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline ::std::string* ColumnMetaData::mutable_original_name() {
  set_has_original_name();
  if (original_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_name)
  return original_name_;
}
inline ::std::string* ColumnMetaData::release_original_name() {
  clear_has_original_name();
  if (original_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = original_name_;
    original_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_original_name(::std::string* original_name) {
  if (original_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_name_;
  }
  if (original_name) {
    set_has_original_name();
    original_name_ = original_name;
  } else {
    clear_has_original_name();
    original_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_name)
}

// optional bytes table = 4;
inline bool ColumnMetaData::has_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnMetaData::set_has_table() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnMetaData::clear_has_table() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnMetaData::clear_table() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& ColumnMetaData::table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.table)
  return *table_;
}
inline void ColumnMetaData::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.table)
}
inline void ColumnMetaData::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.table)
}
inline void ColumnMetaData::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.table)
}
inline ::std::string* ColumnMetaData::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.table)
  return table_;
}
inline ::std::string* ColumnMetaData::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.table)
}

// optional bytes original_table = 5;
inline bool ColumnMetaData::has_original_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnMetaData::set_has_original_table() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnMetaData::clear_has_original_table() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnMetaData::clear_original_table() {
  if (original_table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_table_->clear();
  }
  clear_has_original_table();
}
inline const ::std::string& ColumnMetaData::original_table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_table)
  return *original_table_;
}
inline void ColumnMetaData::set_original_table(const ::std::string& value) {
  set_has_original_table();
  if (original_table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_table_ = new ::std::string;
  }
  original_table_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline void ColumnMetaData::set_original_table(const char* value) {
  set_has_original_table();
  if (original_table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_table_ = new ::std::string;
  }
  original_table_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline void ColumnMetaData::set_original_table(const void* value, size_t size) {
  set_has_original_table();
  if (original_table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_table_ = new ::std::string;
  }
  original_table_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline ::std::string* ColumnMetaData::mutable_original_table() {
  set_has_original_table();
  if (original_table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_table_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_table)
  return original_table_;
}
inline ::std::string* ColumnMetaData::release_original_table() {
  clear_has_original_table();
  if (original_table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = original_table_;
    original_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_original_table(::std::string* original_table) {
  if (original_table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_table_;
  }
  if (original_table) {
    set_has_original_table();
    original_table_ = original_table;
  } else {
    clear_has_original_table();
    original_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_table)
}

// optional bytes schema = 6;
inline bool ColumnMetaData::has_schema() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColumnMetaData::set_has_schema() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColumnMetaData::clear_has_schema() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColumnMetaData::clear_schema() {
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_->clear();
  }
  clear_has_schema();
}
inline const ::std::string& ColumnMetaData::schema() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.schema)
  return *schema_;
}
inline void ColumnMetaData::set_schema(const ::std::string& value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline void ColumnMetaData::set_schema(const char* value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline void ColumnMetaData::set_schema(const void* value, size_t size) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline ::std::string* ColumnMetaData::mutable_schema() {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.schema)
  return schema_;
}
inline ::std::string* ColumnMetaData::release_schema() {
  clear_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = schema_;
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_schema(::std::string* schema) {
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_;
  }
  if (schema) {
    set_has_schema();
    schema_ = schema;
  } else {
    clear_has_schema();
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.schema)
}

// optional bytes catalog = 7;
inline bool ColumnMetaData::has_catalog() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColumnMetaData::set_has_catalog() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColumnMetaData::clear_has_catalog() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColumnMetaData::clear_catalog() {
  if (catalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    catalog_->clear();
  }
  clear_has_catalog();
}
inline const ::std::string& ColumnMetaData::catalog() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.catalog)
  return *catalog_;
}
inline void ColumnMetaData::set_catalog(const ::std::string& value) {
  set_has_catalog();
  if (catalog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    catalog_ = new ::std::string;
  }
  catalog_->assign(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline void ColumnMetaData::set_catalog(const char* value) {
  set_has_catalog();
  if (catalog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    catalog_ = new ::std::string;
  }
  catalog_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline void ColumnMetaData::set_catalog(const void* value, size_t size) {
  set_has_catalog();
  if (catalog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    catalog_ = new ::std::string;
  }
  catalog_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline ::std::string* ColumnMetaData::mutable_catalog() {
  set_has_catalog();
  if (catalog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    catalog_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.catalog)
  return catalog_;
}
inline ::std::string* ColumnMetaData::release_catalog() {
  clear_has_catalog();
  if (catalog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = catalog_;
    catalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnMetaData::set_allocated_catalog(::std::string* catalog) {
  if (catalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete catalog_;
  }
  if (catalog) {
    set_has_catalog();
    catalog_ = catalog;
  } else {
    clear_has_catalog();
    catalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.catalog)
}

// optional uint64 collation = 8;
inline bool ColumnMetaData::has_collation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ColumnMetaData::set_has_collation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ColumnMetaData::clear_has_collation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ColumnMetaData::clear_collation() {
  collation_ = GOOGLE_ULONGLONG(0);
  clear_has_collation();
}
inline ::google::protobuf::uint64 ColumnMetaData::collation() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.collation)
  return collation_;
}
inline void ColumnMetaData::set_collation(::google::protobuf::uint64 value) {
  set_has_collation();
  collation_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.collation)
}

// optional uint32 fractional_digits = 9;
inline bool ColumnMetaData::has_fractional_digits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ColumnMetaData::set_has_fractional_digits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ColumnMetaData::clear_has_fractional_digits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ColumnMetaData::clear_fractional_digits() {
  fractional_digits_ = 0u;
  clear_has_fractional_digits();
}
inline ::google::protobuf::uint32 ColumnMetaData::fractional_digits() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
  return fractional_digits_;
}
inline void ColumnMetaData::set_fractional_digits(::google::protobuf::uint32 value) {
  set_has_fractional_digits();
  fractional_digits_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
}

// optional uint32 length = 10;
inline bool ColumnMetaData::has_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ColumnMetaData::set_has_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ColumnMetaData::clear_has_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ColumnMetaData::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 ColumnMetaData::length() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.length)
  return length_;
}
inline void ColumnMetaData::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.length)
}

// optional uint32 flags = 11;
inline bool ColumnMetaData::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ColumnMetaData::set_has_flags() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ColumnMetaData::clear_has_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ColumnMetaData::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 ColumnMetaData::flags() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.flags)
  return flags_;
}
inline void ColumnMetaData::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.flags)
}

// optional uint32 content_type = 12;
inline bool ColumnMetaData::has_content_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ColumnMetaData::set_has_content_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ColumnMetaData::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ColumnMetaData::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
inline ::google::protobuf::uint32 ColumnMetaData::content_type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.content_type)
  return content_type_;
}
inline void ColumnMetaData::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.content_type)
}

// -------------------------------------------------------------------

// Row

// repeated bytes field = 1;
inline int Row::field_size() const {
  return field_.size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline const ::std::string& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.Row.field)
  return field_.Get(index);
}
inline ::std::string* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.Row.field)
  return field_.Mutable(index);
}
inline void Row::set_field(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.Row.field)
  field_.Mutable(index)->assign(value);
}
inline void Row::set_field(int index, const char* value) {
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.Row.field)
}
inline void Row::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.Row.field)
}
inline ::std::string* Row::add_field() {
  return field_.Add();
}
inline void Row::add_field(const ::std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Mysqlx.Resultset.Row.field)
}
inline void Row::add_field(const char* value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Mysqlx.Resultset.Row.field)
}
inline void Row::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Mysqlx.Resultset.Row.field)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Row::field() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Resultset.Row.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Resultset.Row.field)
  return &field_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Resultset
}  // namespace Mysqlx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Mysqlx::Resultset::ColumnMetaData_FieldType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mysqlx::Resultset::ColumnMetaData_FieldType>() {
  return ::Mysqlx::Resultset::ColumnMetaData_FieldType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysqlx_5fresultset_2eproto__INCLUDED
